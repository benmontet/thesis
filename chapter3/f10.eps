%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: mass_plot.pdf
%%Creator: (Adobe Acrobat 11.0.0)
%%For: btm
%%CreationDate: 7/9/13, 11:00 AM
%%BoundingBox: 0 0 576 432
%%HiResBoundingBox: 0 0 576 432
%%CropBox: 0 0 576 432
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 568 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2013-07-09T11:00:15-07:00"
   xmp:CreatorTool="matplotlib 1.1.0, http://matplotlib.sf.net"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -432 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 432 li
576 432 li
576 0 li
cp
clp
0 432 mo
576 432 li
576 0 li
0 0 li
0 432 li
false sop
/0 
[/DeviceGray] /CSA add_res
1 gry
f
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
f
gsave
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
clp
214.348 199.244 mo
179.636 199.244 li
179.636 172.277 li
214.348 172.277 li
214.348 199.244 li
/1 
[/DeviceCMYK] /CSA add_res
.572549 .478431 0 0 cmyk
f
214.348 199.244 mo
214.348 199.244 li
214.348 172.277 li
179.636 172.277 li
179.636 171.277 li
214.848 171.277 li
214.98 171.277 215.109 171.33 215.202 171.423 cv
215.295 171.517 215.348 171.645 215.348 171.777 cv
215.348 186.565 li
214.848 186.565 li
214.716 186.565 214.588 186.619 214.494 186.712 cv
214.401 186.805 214.348 186.934 214.348 187.065 cv
214.348 199.244 li
0 0 0 .596078 cmyk
f
grestore
gsave
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
clp
250.06 276.14 mo
215.348 276.14 li
215.348 199.744 li
215.348 199.744 li
215.348 187.565 li
250.06 187.565 li
250.06 276.14 li
.572549 .478431 0 0 cmyk
f
250.06 276.14 mo
250.06 276.14 li
250.06 187.565 li
215.348 187.565 li
215.348 199.744 li
215.348 199.744 li
215.348 186.565 li
250.56 186.565 li
250.692 186.565 250.821 186.619 250.914 186.712 cv
251.007 186.805 251.06 186.934 251.06 187.065 cv
251.06 235.048 li
250.56 235.048 li
250.428 235.048 250.3 235.102 250.207 235.195 cv
250.113 235.288 250.06 235.417 250.06 235.548 cv
250.06 276.14 li
0 0 0 .596078 cmyk
f
215.348 199.744 mo
215.348 199.612 215.295 199.484 215.202 199.391 cv
215.109 199.297 214.98 199.244 214.848 199.244 cv
214.348 199.244 li
214.348 187.065 li
214.348 186.934 214.401 186.805 214.494 186.712 cv
214.588 186.619 214.716 186.565 214.848 186.565 cv
215.348 186.565 li
215.348 199.744 li
0 0 0 .839216 cmyk
f
grestore
gsave
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
clp
285.772 332.757 mo
251.06 332.757 li
251.06 276.64 li
251.06 276.64 li
251.06 236.048 li
285.772 236.049 li
285.772 332.757 li
.572549 .478431 0 0 cmyk
f
285.772 332.757 mo
285.772 332.757 li
285.772 236.049 li
251.06 236.048 li
251.06 276.64 li
251.06 276.64 li
251.06 235.048 li
286.272 235.048 li
286.404 235.048 286.533 235.102 286.626 235.195 cv
286.719 235.288 286.772 235.417 286.772 235.548 cv
286.772 287.278 li
286.272 287.278 li
286.14 287.278 286.012 287.331 285.919 287.424 cv
285.825 287.517 285.772 287.646 285.772 287.777 cv
285.772 332.757 li
0 0 0 .596078 cmyk
f
251.06 276.64 mo
251.06 276.508 251.007 276.38 250.914 276.286 cv
250.821 276.193 250.692 276.14 250.56 276.14 cv
250.06 276.14 li
250.06 235.548 li
250.06 235.417 250.113 235.288 250.207 235.195 cv
250.3 235.102 250.428 235.048 250.56 235.048 cv
251.06 235.048 li
251.06 276.64 li
0 0 0 .839216 cmyk
f
grestore
gsave
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
clp
321.484 365.008 mo
286.772 365.008 li
286.772 333.258 li
286.772 333.258 li
286.772 288.278 li
321.484 288.278 li
321.484 365.008 li
.572549 .478431 0 0 cmyk
f
321.484 365.008 mo
321.484 365.008 li
321.484 288.278 li
286.772 288.278 li
286.772 333.258 li
286.772 333.258 li
286.772 287.278 li
321.984 287.278 li
322.116 287.278 322.245 287.331 322.338 287.424 cv
322.431 287.517 322.484 287.646 322.484 287.777 cv
322.484 330.113 li
321.984 330.113 li
321.852 330.113 321.724 330.166 321.631 330.259 cv
321.537 330.352 321.484 330.481 321.484 330.613 cv
321.484 365.008 li
0 0 0 .596078 cmyk
f
286.772 333.258 mo
286.772 333.126 286.719 332.997 286.626 332.904 cv
286.533 332.811 286.404 332.757 286.272 332.757 cv
285.772 332.757 li
285.772 287.777 li
285.772 287.646 285.825 287.517 285.919 287.424 cv
286.012 287.331 286.14 287.278 286.272 287.278 cv
286.772 287.278 li
286.772 333.258 li
0 0 0 .839216 cmyk
f
grestore
gsave
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
clp
357.196 379.801 mo
322.484 379.801 li
322.484 365.508 li
322.484 365.508 li
322.484 331.112 li
357.196 331.112 li
357.196 379.801 li
.572549 .478431 0 0 cmyk
f
357.196 379.801 mo
357.196 379.801 li
357.196 331.112 li
322.484 331.112 li
322.484 365.508 li
322.484 365.508 li
322.484 330.113 li
357.696 330.113 li
357.827 330.113 357.957 330.166 358.05 330.259 cv
358.143 330.352 358.196 330.481 358.196 330.613 cv
358.196 358.523 li
357.696 358.523 li
357.564 358.523 357.436 358.577 357.343 358.67 cv
357.249 358.763 357.196 358.892 357.196 359.023 cv
357.196 379.801 li
0 0 0 .596078 cmyk
f
322.484 365.508 mo
322.484 365.376 322.431 365.247 322.338 365.154 cv
322.245 365.061 322.116 365.008 321.984 365.008 cv
321.484 365.008 li
321.484 330.613 li
321.484 330.481 321.537 330.352 321.631 330.259 cv
321.724 330.166 321.852 330.113 321.984 330.113 cv
322.484 330.113 li
322.484 365.508 li
0 0 0 .839216 cmyk
f
grestore
gsave
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
clp
392.908 385.512 mo
358.196 385.512 li
358.196 380.3 li
358.196 380.3 li
358.196 359.523 li
392.908 359.523 li
392.908 385.512 li
.572549 .478431 0 0 cmyk
f
392.908 385.512 mo
392.908 385.512 li
392.908 359.523 li
358.196 359.523 li
358.196 380.3 li
358.196 380.3 li
358.196 358.523 li
393.408 358.523 li
393.539 358.523 393.668 358.577 393.761 358.67 cv
393.854 358.763 393.908 358.892 393.908 359.023 cv
393.908 374.648 li
393.408 374.648 li
393.276 374.648 393.147 374.701 393.054 374.794 cv
392.962 374.887 392.908 375.016 392.908 375.148 cv
392.908 385.512 li
0 0 0 .596078 cmyk
f
358.196 380.3 mo
358.196 380.169 358.143 380.04 358.05 379.947 cv
357.957 379.854 357.827 379.801 357.696 379.801 cv
357.196 379.801 li
357.196 359.023 li
357.196 358.892 357.249 358.763 357.343 358.67 cv
357.436 358.577 357.564 358.523 357.696 358.523 cv
358.196 358.523 li
358.196 380.3 li
0 0 0 .839216 cmyk
f
grestore
gsave
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
clp
428.62 387.415 mo
393.908 387.415 li
393.908 386.012 li
393.908 386.012 li
393.908 375.648 li
428.62 375.648 li
428.62 387.415 li
.572549 .478431 0 0 cmyk
f
428.62 387.415 mo
428.62 387.415 li
428.62 375.648 li
393.908 375.648 li
393.908 386.012 li
393.908 386.012 li
393.908 374.648 li
429.12 374.648 li
429.251 374.648 429.38 374.701 429.473 374.794 cv
429.566 374.887 429.62 375.016 429.62 375.148 cv
429.62 382.533 li
429.12 382.533 li
428.988 382.533 428.859 382.586 428.766 382.679 cv
428.674 382.772 428.62 382.901 428.62 383.033 cv
428.62 387.415 li
0 0 0 .596078 cmyk
f
393.908 386.012 mo
393.908 385.88 393.854 385.752 393.761 385.659 cv
393.668 385.565 393.539 385.512 393.408 385.512 cv
392.908 385.512 li
392.908 375.148 li
392.908 375.016 392.962 374.887 393.054 374.794 cv
393.147 374.701 393.276 374.648 393.408 374.648 cv
393.908 374.648 li
393.908 386.012 li
0 0 0 .839216 cmyk
f
grestore
gsave
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
clp
464.332 388.044 mo
429.62 388.044 li
429.62 387.915 li
429.62 387.915 li
429.62 383.533 li
464.332 383.533 li
464.332 388.044 li
.572549 .478431 0 0 cmyk
f
464.332 388.044 mo
464.332 388.044 li
464.332 383.533 li
429.62 383.533 li
429.62 387.915 li
429.62 387.915 li
429.62 382.533 li
464.832 382.533 li
464.964 382.533 465.092 382.586 465.185 382.679 cv
465.279 382.772 465.332 382.901 465.332 383.033 cv
465.332 386.047 li
464.832 386.047 li
464.7 386.047 464.571 386.1 464.478 386.193 cv
464.385 386.286 464.332 386.415 464.332 386.547 cv
464.332 388.044 li
0 0 0 .596078 cmyk
f
429.62 387.915 mo
429.62 387.784 429.566 387.655 429.473 387.562 cv
429.38 387.469 429.251 387.415 429.12 387.415 cv
428.62 387.415 li
428.62 383.033 li
428.62 382.901 428.674 382.772 428.766 382.679 cv
428.859 382.586 428.988 382.533 429.12 382.533 cv
429.62 382.533 li
429.62 387.915 li
0 0 0 .839216 cmyk
f
grestore
gsave
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
clp
500.044 388.234 mo
465.332 388.234 li
465.332 387.047 li
500.044 387.047 li
500.044 388.234 li
.572549 .478431 0 0 cmyk
f
500.044 388.234 mo
500.044 388.234 li
500.044 387.047 li
465.332 387.047 li
465.332 388.234 li
465.332 386.047 li
500.544 386.047 li
500.676 386.047 500.804 386.1 500.897 386.193 cv
500.991 386.286 501.044 386.415 501.044 386.547 cv
501.044 387.468 li
500.544 387.468 li
500.412 387.468 500.283 387.522 500.19 387.615 cv
500.097 387.708 500.044 387.837 500.044 387.968 cv
500.044 388.234 li
0 0 0 .596078 cmyk
f
465.332 388.234 mo
465.224 388.234 li
465.212 388.219 465.199 388.205 465.185 388.191 cv
465.092 388.098 464.964 388.044 464.832 388.044 cv
464.332 388.044 li
464.332 386.547 li
464.332 386.415 464.385 386.286 464.478 386.193 cv
464.571 386.1 464.7 386.047 464.832 386.047 cv
465.332 386.047 li
465.332 388.234 li
0 0 0 .839216 cmyk
f
grestore
gsave
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
clp
518.4 388.284 mo
501.044 388.284 li
501.044 387.468 li
518.4 387.468 li
518.4 388.284 li
0 0 0 .596078 cmyk
f
501.044 388.284 mo
500.761 388.284 li
500.693 388.252 500.619 388.234 500.544 388.234 cv
500.044 388.234 li
500.044 387.968 li
500.044 387.837 500.097 387.708 500.19 387.615 cv
500.283 387.522 500.412 387.468 500.544 387.468 cv
501.044 387.468 li
501.044 388.284 li
0 0 0 .839216 cmyk
f
grestore
gsave
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
clp
107.212 337.057 mo
72.5001 337.057 li
72.5001 231.289 li
107.212 231.289 li
107.212 260.744 li
107.212 260.744 li
107.212 337.057 li
0 0 0 .301961 cmyk
f
107.212 388.3 mo
72.5001 388.3 li
72.5001 338.057 li
107.212 338.057 li
107.212 388.3 li
.227451 .192157 0 .301961 cmyk
f
107.212 388.3 mo
72.5001 388.3 li
107.212 388.3 li
107.212 338.057 li
72.5001 338.057 li
72.5001 337.057 li
107.212 337.057 li
107.212 388.3 li
0 0 0 .541176 cmyk
f
72.5001 337.057 mo
72.0002 337.057 li
72.0002 230.29 li
72.0002 230.29 li
107.212 230.29 li
107.212 260.744 li
107.212 260.744 li
107.212 231.289 li
72.5001 231.289 li
72.5001 337.057 li
0 0 0 .596078 cmyk
f
107.212 388.8 mo
72.0002 388.8 li
72.0002 337.057 li
72.5001 337.057 li
72.5001 338.057 li
72.5001 388.3 li
107.212 388.3 li
107.212 388.8 li
0 0 0 .839216 cmyk
f
107.212 388.8 mo
107.212 388.8 li
107.212 388.3 li
107.212 337.057 li
107.212 388.8 li
0 0 0 .937255 cmyk
f
grestore
gsave
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
clp
142.924 260.244 mo
108.212 260.244 li
108.212 75.9491 li
142.924 75.9491 li
142.924 199.959 li
142.924 199.959 li
142.924 260.244 li
0 0 0 .301961 cmyk
f
142.924 388.3 mo
108.212 388.3 li
108.212 261.244 li
142.924 261.244 li
142.924 388.3 li
.227451 .192157 0 .301961 cmyk
f
142.924 388.3 mo
108.212 388.3 li
142.924 388.3 li
142.924 261.244 li
108.212 261.244 li
108.212 260.244 li
142.924 260.244 li
142.924 388.3 li
0 0 0 .541176 cmyk
f
108.212 260.244 mo
108.212 260.244 li
108.212 230.789 li
108.212 230.658 108.159 230.529 108.066 230.436 cv
107.972 230.343 107.844 230.29 107.712 230.29 cv
107.212 230.29 li
107.212 75.4492 li
107.212 75.3172 107.265 75.1885 107.358 75.0954 cv
107.452 75.0022 107.58 74.9493 107.712 74.9493 cv
143.424 74.9493 li
143.556 74.9493 143.684 75.0022 143.778 75.0954 cv
143.871 75.1885 143.924 75.3172 143.924 75.4492 cv
143.924 100.231 li
143.424 100.231 li
143.292 100.231 143.164 100.284 143.07 100.377 cv
142.977 100.47 142.924 100.599 142.924 100.731 cv
142.924 199.959 li
142.924 199.959 li
142.924 75.9491 li
108.212 75.9491 li
108.212 260.244 li
0 0 0 .596078 cmyk
f
142.924 388.8 mo
108.212 388.8 li
108.212 388.3 li
142.924 388.3 li
142.924 388.8 li
0 0 0 .839216 cmyk
f
142.924 388.8 mo
142.924 388.8 li
142.924 388.3 li
142.924 260.244 li
142.924 388.8 li
0 0 0 .937255 cmyk
f
107.212 260.744 mo
107.212 230.29 li
107.712 230.29 li
107.844 230.29 107.972 230.343 108.066 230.436 cv
108.159 230.529 108.212 230.658 108.212 230.789 cv
108.212 260.244 li
107.712 260.244 li
107.58 260.244 107.452 260.297 107.358 260.39 cv
107.265 260.483 107.212 260.612 107.212 260.744 cv
0 0 0 .839216 cmyk
f
108.212 388.8 mo
108.212 388.8 li
108.212 337.557 li
108.212 337.425 108.159 337.296 108.066 337.203 cv
107.972 337.11 107.844 337.057 107.712 337.057 cv
107.212 337.057 li
107.212 260.744 li
107.212 260.612 107.265 260.483 107.358 260.39 cv
107.452 260.297 107.58 260.244 107.712 260.244 cv
108.212 260.244 li
108.212 261.244 li
108.212 388.3 li
108.212 388.8 li
0 0 0 .937255 cmyk
f
108.212 388.8 mo
107.212 388.8 li
107.212 337.057 li
107.712 337.057 li
107.844 337.057 107.972 337.11 108.066 337.203 cv
108.159 337.296 108.212 337.425 108.212 337.557 cv
108.212 388.8 li
0 0 0 .976471 cmyk
f
grestore
gsave
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
clp
178.636 199.459 mo
143.924 199.459 li
143.924 101.231 li
178.636 101.231 li
178.636 171.777 li
178.636 171.777 li
178.636 199.459 li
0 0 0 .301961 cmyk
f
178.636 388.3 mo
143.924 388.3 li
143.924 200.458 li
178.636 200.458 li
178.636 388.3 li
.227451 .192157 0 .301961 cmyk
f
178.636 388.3 mo
143.924 388.3 li
178.636 388.3 li
178.636 200.458 li
143.924 200.458 li
143.924 199.459 li
178.636 199.459 li
178.636 388.3 li
0 0 0 .541176 cmyk
f
143.924 199.459 mo
143.924 199.459 li
143.924 100.231 li
179.136 100.231 li
179.268 100.231 179.396 100.284 179.49 100.377 cv
179.583 100.47 179.636 100.599 179.636 100.731 cv
179.636 171.277 li
179.136 171.277 li
179.004 171.277 178.876 171.33 178.782 171.423 cv
178.689 171.517 178.636 171.645 178.636 171.777 cv
178.636 101.231 li
143.924 101.231 li
143.924 199.459 li
0 0 0 .596078 cmyk
f
178.636 388.8 mo
143.924 388.8 li
143.924 388.3 li
178.636 388.3 li
178.636 388.8 li
0 0 0 .839216 cmyk
f
178.726 199.459 mo
178.636 199.459 li
178.636 171.777 li
178.636 171.645 178.689 171.517 178.782 171.423 cv
178.876 171.33 179.004 171.277 179.136 171.277 cv
179.636 171.277 li
179.636 172.277 li
179.636 199.244 li
179.136 199.244 li
179.004 199.244 178.876 199.297 178.782 199.391 cv
178.761 199.412 178.743 199.434 178.726 199.459 cv
f
178.636 388.8 mo
178.636 388.8 li
178.636 388.3 li
178.636 199.459 li
178.726 199.459 li
178.668 199.542 178.636 199.642 178.636 199.744 cv
178.636 388.8 li
0 0 0 .937255 cmyk
f
142.924 199.959 mo
142.924 100.731 li
142.924 100.599 142.977 100.47 143.07 100.377 cv
143.164 100.284 143.292 100.231 143.424 100.231 cv
143.924 100.231 li
143.924 199.459 li
143.424 199.459 li
143.292 199.459 143.164 199.512 143.07 199.605 cv
142.977 199.698 142.924 199.827 142.924 199.959 cv
0 0 0 .839216 cmyk
f
143.924 388.8 mo
143.924 388.8 li
143.924 260.744 li
143.924 260.612 143.871 260.483 143.778 260.39 cv
143.684 260.297 143.556 260.244 143.424 260.244 cv
142.924 260.244 li
142.924 199.959 li
142.924 199.827 142.977 199.698 143.07 199.605 cv
143.164 199.512 143.292 199.459 143.424 199.459 cv
143.924 199.459 li
143.924 200.458 li
143.924 388.3 li
143.924 388.8 li
0 0 0 .937255 cmyk
f
143.924 388.8 mo
142.924 388.8 li
142.924 260.244 li
143.424 260.244 li
143.556 260.244 143.684 260.297 143.778 260.39 cv
143.871 260.483 143.924 260.612 143.924 260.744 cv
143.924 388.8 li
0 0 0 .976471 cmyk
f
grestore
gsave
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
clp
214.348 388.3 mo
179.636 388.3 li
179.636 200.244 li
214.348 200.244 li
214.348 388.3 li
.227451 .192157 0 .301961 cmyk
f
179.636 388.3 mo
179.636 388.3 li
179.636 199.244 li
214.348 199.244 li
214.348 200.244 li
179.636 200.244 li
179.636 388.3 li
.227451 .192157 0 .596078 cmyk
f
214.348 388.8 mo
179.636 388.8 li
179.636 388.3 li
214.348 388.3 li
214.348 388.8 li
0 0 0 .839216 cmyk
f
214.348 388.8 mo
214.348 388.8 li
214.348 388.3 li
214.348 200.244 li
214.348 199.244 li
214.848 199.244 li
214.98 199.244 215.109 199.297 215.202 199.391 cv
215.295 199.484 215.348 199.612 215.348 199.744 cv
215.348 276.14 li
214.848 276.14 li
214.716 276.14 214.588 276.193 214.494 276.286 cv
214.401 276.38 214.348 276.508 214.348 276.64 cv
214.348 388.8 li
0 0 0 .937255 cmyk
f
179.636 388.8 mo
179.636 388.8 li
179.636 199.959 li
179.636 199.827 179.583 199.698 179.49 199.605 cv
179.396 199.512 179.268 199.459 179.136 199.459 cv
178.726 199.459 li
178.743 199.434 178.761 199.412 178.782 199.391 cv
178.876 199.297 179.004 199.244 179.136 199.244 cv
179.636 199.244 li
179.636 388.3 li
179.636 388.8 li
f
179.636 388.8 mo
178.636 388.8 li
178.636 199.744 li
178.636 199.642 178.668 199.542 178.726 199.459 cv
179.136 199.459 li
179.268 199.459 179.396 199.512 179.49 199.605 cv
179.583 199.698 179.636 199.827 179.636 199.959 cv
179.636 388.8 li
0 0 0 .976471 cmyk
f
grestore
gsave
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
clp
250.06 388.3 mo
215.348 388.3 li
215.348 277.14 li
250.06 277.14 li
250.06 388.3 li
.227451 .192157 0 .301961 cmyk
f
215.348 388.3 mo
215.348 388.3 li
215.348 276.14 li
250.06 276.14 li
250.06 277.14 li
215.348 277.14 li
215.348 388.3 li
.227451 .192157 0 .596078 cmyk
f
250.06 388.8 mo
215.348 388.8 li
215.348 388.3 li
250.06 388.3 li
250.06 388.8 li
0 0 0 .839216 cmyk
f
250.06 388.8 mo
250.06 388.8 li
250.06 388.3 li
250.06 277.14 li
250.06 276.14 li
250.56 276.14 li
250.692 276.14 250.821 276.193 250.914 276.286 cv
251.007 276.38 251.06 276.508 251.06 276.64 cv
251.06 332.757 li
250.56 332.757 li
250.428 332.757 250.3 332.811 250.207 332.904 cv
250.113 332.997 250.06 333.126 250.06 333.258 cv
250.06 388.8 li
0 0 0 .937255 cmyk
f
215.348 388.8 mo
215.348 388.8 li
215.348 276.14 li
215.348 388.3 li
215.348 388.8 li
f
215.348 388.8 mo
214.348 388.8 li
214.348 276.64 li
214.348 276.508 214.401 276.38 214.494 276.286 cv
214.588 276.193 214.716 276.14 214.848 276.14 cv
215.348 276.14 li
215.348 388.8 li
0 0 0 .976471 cmyk
f
grestore
gsave
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
clp
285.772 388.3 mo
251.06 388.3 li
251.06 333.758 li
285.772 333.758 li
285.772 388.3 li
.227451 .192157 0 .301961 cmyk
f
251.06 388.3 mo
251.06 388.3 li
251.06 332.757 li
285.772 332.757 li
285.772 333.758 li
251.06 333.758 li
251.06 388.3 li
.227451 .192157 0 .596078 cmyk
f
285.772 388.8 mo
251.06 388.8 li
251.06 388.3 li
285.772 388.3 li
285.772 388.8 li
0 0 0 .839216 cmyk
f
285.772 388.8 mo
285.772 388.8 li
285.772 388.3 li
285.772 333.758 li
285.772 332.757 li
286.272 332.757 li
286.404 332.757 286.533 332.811 286.626 332.904 cv
286.719 332.997 286.772 333.126 286.772 333.258 cv
286.772 365.008 li
286.272 365.008 li
286.14 365.008 286.012 365.061 285.919 365.154 cv
285.825 365.247 285.772 365.376 285.772 365.508 cv
285.772 388.8 li
0 0 0 .937255 cmyk
f
251.06 388.8 mo
251.06 388.8 li
251.06 332.757 li
251.06 388.3 li
251.06 388.8 li
f
251.06 388.8 mo
250.06 388.8 li
250.06 333.258 li
250.06 333.126 250.113 332.997 250.207 332.904 cv
250.3 332.811 250.428 332.757 250.56 332.757 cv
251.06 332.757 li
251.06 388.8 li
0 0 0 .976471 cmyk
f
grestore
gsave
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
clp
321.484 388.3 mo
286.772 388.3 li
286.772 366.008 li
321.484 366.008 li
321.484 388.3 li
.227451 .192157 0 .301961 cmyk
f
286.772 388.3 mo
286.772 388.3 li
286.772 365.008 li
321.484 365.008 li
321.484 366.008 li
286.772 366.008 li
286.772 388.3 li
.227451 .192157 0 .596078 cmyk
f
321.484 388.8 mo
286.772 388.8 li
286.772 388.3 li
321.484 388.3 li
321.484 388.8 li
0 0 0 .839216 cmyk
f
321.484 388.8 mo
321.484 388.8 li
321.484 388.3 li
321.484 366.008 li
321.484 365.008 li
321.984 365.008 li
322.116 365.008 322.245 365.061 322.338 365.154 cv
322.431 365.247 322.484 365.376 322.484 365.508 cv
322.484 379.801 li
321.984 379.801 li
321.852 379.801 321.724 379.854 321.631 379.947 cv
321.537 380.04 321.484 380.169 321.484 380.3 cv
321.484 388.8 li
0 0 0 .937255 cmyk
f
286.772 388.8 mo
286.772 388.8 li
286.772 365.008 li
286.772 388.3 li
286.772 388.8 li
f
286.772 388.8 mo
285.772 388.8 li
285.772 365.508 li
285.772 365.376 285.825 365.247 285.919 365.154 cv
286.012 365.061 286.14 365.008 286.272 365.008 cv
286.772 365.008 li
286.772 388.8 li
0 0 0 .976471 cmyk
f
grestore
gsave
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
clp
357.196 388.3 mo
322.484 388.3 li
322.484 380.8 li
357.196 380.8 li
357.196 388.3 li
.227451 .192157 0 .301961 cmyk
f
322.484 388.3 mo
322.484 388.3 li
322.484 379.801 li
357.196 379.801 li
357.196 380.8 li
322.484 380.8 li
322.484 388.3 li
.227451 .192157 0 .596078 cmyk
f
357.196 388.8 mo
322.484 388.8 li
322.484 388.3 li
357.196 388.3 li
357.196 388.8 li
0 0 0 .839216 cmyk
f
357.196 388.8 mo
357.196 388.8 li
357.196 388.3 li
357.196 380.8 li
357.196 379.801 li
357.696 379.801 li
357.827 379.801 357.957 379.854 358.05 379.947 cv
358.143 380.04 358.196 380.169 358.196 380.3 cv
358.196 385.512 li
357.696 385.512 li
357.564 385.512 357.436 385.565 357.343 385.659 cv
357.249 385.752 357.196 385.88 357.196 386.012 cv
357.196 388.8 li
0 0 0 .937255 cmyk
f
322.484 388.8 mo
322.484 388.8 li
322.484 379.801 li
322.484 388.3 li
322.484 388.8 li
f
322.484 388.8 mo
321.484 388.8 li
321.484 380.3 li
321.484 380.169 321.537 380.04 321.631 379.947 cv
321.724 379.854 321.852 379.801 321.984 379.801 cv
322.484 379.801 li
322.484 388.8 li
0 0 0 .976471 cmyk
f
grestore
gsave
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
clp
392.908 388.3 mo
358.196 388.3 li
358.196 386.512 li
392.908 386.512 li
392.908 388.3 li
.227451 .192157 0 .301961 cmyk
f
358.196 388.3 mo
358.196 388.3 li
358.196 385.512 li
392.908 385.512 li
392.908 386.512 li
358.196 386.512 li
358.196 388.3 li
.227451 .192157 0 .596078 cmyk
f
392.908 388.8 mo
358.196 388.8 li
358.196 388.3 li
392.908 388.3 li
392.908 388.8 li
0 0 0 .839216 cmyk
f
392.908 388.8 mo
392.908 388.8 li
392.908 388.3 li
392.908 386.512 li
392.908 385.512 li
393.408 385.512 li
393.539 385.512 393.668 385.565 393.761 385.659 cv
393.854 385.752 393.908 385.88 393.908 386.012 cv
393.908 387.415 li
393.408 387.415 li
393.276 387.415 393.147 387.469 393.054 387.562 cv
392.962 387.655 392.908 387.784 392.908 387.915 cv
392.908 388.8 li
0 0 0 .937255 cmyk
f
358.196 388.8 mo
358.196 388.8 li
358.196 385.512 li
358.196 388.3 li
358.196 388.8 li
f
358.196 388.8 mo
357.196 388.8 li
357.196 386.012 li
357.196 385.88 357.249 385.752 357.343 385.659 cv
357.436 385.565 357.564 385.512 357.696 385.512 cv
358.196 385.512 li
358.196 388.8 li
0 0 0 .976471 cmyk
f
grestore
gsave
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
clp
428.62 388.3 mo
393.908 388.3 li
393.908 387.415 li
428.62 387.415 li
428.62 388.3 li
.227451 .192157 0 .596078 cmyk
f
428.62 388.8 mo
393.908 388.8 li
393.908 388.3 li
428.62 388.3 li
428.62 387.415 li
428.62 388.8 li
0 0 0 .839216 cmyk
f
428.62 388.8 mo
428.62 388.8 li
428.62 387.415 li
429.12 387.415 li
429.251 387.415 429.38 387.469 429.473 387.562 cv
429.566 387.655 429.62 387.784 429.62 387.915 cv
429.62 388.044 li
429.12 388.044 li
428.988 388.044 428.859 388.098 428.766 388.19 cv
428.674 388.284 428.62 388.413 428.62 388.544 cv
428.62 388.8 li
0 0 0 .937255 cmyk
f
393.908 388.8 mo
393.908 388.8 li
393.908 387.415 li
393.908 388.3 li
393.908 388.8 li
f
393.908 388.8 mo
392.908 388.8 li
392.908 387.915 li
392.908 387.784 392.962 387.655 393.054 387.562 cv
393.147 387.469 393.276 387.415 393.408 387.415 cv
393.908 387.415 li
393.908 388.8 li
0 0 0 .976471 cmyk
f
grestore
gsave
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
clp
464.332 388.3 mo
429.62 388.3 li
429.62 388.044 li
464.332 388.044 li
464.332 388.3 li
.227451 .192157 0 .596078 cmyk
f
464.332 388.8 mo
429.62 388.8 li
429.62 388.3 li
464.332 388.3 li
464.332 388.044 li
464.332 388.8 li
0 0 0 .839216 cmyk
f
464.332 388.8 mo
464.332 388.8 li
464.332 388.044 li
464.832 388.044 li
464.964 388.044 465.092 388.098 465.185 388.191 cv
465.199 388.205 465.212 388.219 465.224 388.234 cv
464.832 388.234 li
464.7 388.234 464.571 388.288 464.478 388.381 cv
464.385 388.474 464.332 388.603 464.332 388.734 cv
464.332 388.8 li
0 0 0 .937255 cmyk
f
429.62 388.8 mo
429.62 388.8 li
429.62 388.044 li
429.62 388.3 li
429.62 388.8 li
f
429.62 388.8 mo
428.62 388.8 li
428.62 388.544 li
428.62 388.413 428.674 388.284 428.766 388.19 cv
428.859 388.098 428.988 388.044 429.12 388.044 cv
429.62 388.044 li
429.62 388.8 li
0 0 0 .976471 cmyk
f
grestore
gsave
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
clp
500.044 388.3 mo
465.332 388.3 li
465.332 388.234 li
500.044 388.234 li
500.044 388.3 li
.227451 .192157 0 .596078 cmyk
f
500.044 388.8 mo
465.332 388.8 li
465.332 388.544 li
465.332 388.544 li
465.332 388.234 li
465.332 388.3 li
500.044 388.3 li
500.044 388.234 li
500.044 388.8 li
0 0 0 .839216 cmyk
f
465.332 388.544 mo
465.332 388.432 465.293 388.322 465.224 388.234 cv
465.332 388.234 li
465.332 388.544 li
0 0 0 .937255 cmyk
f
500.044 388.8 mo
500.044 388.8 li
500.044 388.234 li
500.544 388.234 li
500.619 388.234 500.693 388.252 500.761 388.284 cv
500.544 388.284 li
500.412 388.284 500.283 388.337 500.19 388.43 cv
500.097 388.523 500.044 388.652 500.044 388.784 cv
500.044 388.8 li
f
465.332 388.8 mo
464.332 388.8 li
464.332 388.734 li
464.332 388.603 464.385 388.474 464.478 388.381 cv
464.571 388.288 464.7 388.234 464.832 388.234 cv
465.224 388.234 li
465.293 388.322 465.332 388.432 465.332 388.544 cv
465.332 388.8 li
0 0 0 .976471 cmyk
f
grestore
gsave
72.0002 388.8 mo
518.4 388.8 li
518.4 43.1998 li
72.0002 43.1998 li
72.0002 388.8 li
clp
518.4 388.8 mo
501.044 388.8 li
501.044 388.734 li
501.044 388.734 li
501.044 388.284 li
518.4 388.284 li
518.4 388.8 li
0 0 0 .839216 cmyk
f
501.044 388.734 mo
501.044 388.603 500.991 388.474 500.897 388.381 cv
500.857 388.341 500.811 388.308 500.761 388.284 cv
501.044 388.284 li
501.044 388.734 li
0 0 0 .937255 cmyk
f
501.044 388.8 mo
500.044 388.8 li
500.044 388.784 li
500.044 388.652 500.097 388.523 500.19 388.43 cv
500.283 388.337 500.412 388.284 500.544 388.284 cv
500.761 388.284 li
500.811 388.308 500.857 388.341 500.897 388.381 cv
500.991 388.474 501.044 388.603 501.044 388.734 cv
501.044 388.8 li
0 0 0 .976471 cmyk
f
grestore
72 388.8 mo
72 381.8 li
0 gry
f
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
72 388.8 mo
72 381.8 li
@
72 43.2 mo
72 50.2 li
f
72 43.2 mo
72 50.2 li
@
60.3224 397.051 mo
59.5064 397.051 58.8984 397.451 58.4824 398.251 cv
58.0664 399.051 57.8744 400.251 57.8744 401.851 cv
57.8744 403.451 58.0664 404.651 58.4824 405.451 cv
58.8984 406.251 59.5064 406.651 60.3224 406.651 cv
61.1384 406.651 61.7464 406.251 62.1624 405.451 cv
62.5624 404.651 62.7704 403.451 62.7704 401.851 cv
62.7704 400.251 62.5624 399.051 62.1624 398.251 cv
61.7464 397.451 61.1384 397.051 60.3224 397.051 cv
60.3224 395.803 mo
61.6184 395.803 62.6104 396.331 63.3144 397.355 cv
64.0024 398.395 64.3544 399.899 64.3544 401.851 cv
64.3544 403.819 64.0024 405.323 63.3144 406.347 cv
62.6104 407.371 61.6184 407.883 60.3224 407.883 cv
59.0104 407.883 58.0024 407.371 57.3144 406.347 cv
56.6264 405.323 56.2904 403.819 56.2904 401.851 cv
56.2904 399.899 56.6264 398.395 57.3144 397.355 cv
58.0024 396.331 59.0104 395.803 60.3224 395.803 cv
f
67.1224 405.691 mo
68.7704 405.691 li
68.7704 407.675 li
67.1224 407.675 li
67.1224 405.691 li
f
75.5863 397.051 mo
74.7703 397.051 74.1623 397.451 73.7463 398.251 cv
73.3303 399.051 73.1383 400.251 73.1383 401.851 cv
73.1383 403.451 73.3303 404.651 73.7463 405.451 cv
74.1623 406.251 74.7703 406.651 75.5863 406.651 cv
76.4023 406.651 77.0103 406.251 77.4263 405.451 cv
77.8263 404.651 78.0343 403.451 78.0343 401.851 cv
78.0343 400.251 77.8263 399.051 77.4263 398.251 cv
77.0103 397.451 76.4023 397.051 75.5863 397.051 cv
75.5863 395.803 mo
76.8823 395.803 77.8743 396.331 78.5783 397.355 cv
79.2663 398.395 79.6183 399.899 79.6183 401.851 cv
79.6183 403.819 79.2663 405.323 78.5783 406.347 cv
77.8743 407.371 76.8823 407.883 75.5863 407.883 cv
74.2743 407.883 73.2663 407.371 72.5783 406.347 cv
71.8903 405.323 71.5543 403.819 71.5543 401.851 cv
71.5543 399.899 71.8903 398.395 72.5783 397.355 cv
73.2663 396.331 74.2743 395.803 75.5863 395.803 cv
f
85.7623 397.051 mo
84.9463 397.051 84.3383 397.451 83.9223 398.251 cv
83.5063 399.051 83.3143 400.251 83.3143 401.851 cv
83.3143 403.451 83.5063 404.651 83.9223 405.451 cv
84.3383 406.251 84.9463 406.651 85.7623 406.651 cv
86.5783 406.651 87.1863 406.251 87.6023 405.451 cv
88.0023 404.651 88.2103 403.451 88.2103 401.851 cv
88.2103 400.251 88.0023 399.051 87.6023 398.251 cv
87.1863 397.451 86.5783 397.051 85.7623 397.051 cv
85.7623 395.803 mo
87.0583 395.803 88.0503 396.331 88.7543 397.355 cv
89.4423 398.395 89.7943 399.899 89.7943 401.851 cv
89.7943 403.819 89.4423 405.323 88.7543 406.347 cv
88.0503 407.371 87.0583 407.883 85.7623 407.883 cv
84.4503 407.883 83.4423 407.371 82.7543 406.347 cv
82.0663 405.323 81.7303 403.819 81.7303 401.851 cv
81.7303 399.899 82.0663 398.395 82.7543 397.355 cv
83.4423 396.331 84.4503 395.803 85.7623 395.803 cv
f
161.28 388.8 mo
161.28 381.8 li
f
161.28 388.8 mo
161.28 381.8 li
@
161.28 43.2 mo
161.28 50.2 li
f
161.28 43.2 mo
161.28 50.2 li
@
149.774 397.051 mo
148.958 397.051 148.35 397.451 147.934 398.251 cv
147.518 399.051 147.326 400.251 147.326 401.851 cv
147.326 403.451 147.518 404.651 147.934 405.451 cv
148.35 406.251 148.958 406.651 149.774 406.651 cv
150.59 406.651 151.198 406.251 151.614 405.451 cv
152.014 404.651 152.222 403.451 152.222 401.851 cv
152.222 400.251 152.014 399.051 151.614 398.251 cv
151.198 397.451 150.59 397.051 149.774 397.051 cv
149.774 395.803 mo
151.07 395.803 152.062 396.331 152.766 397.355 cv
153.454 398.395 153.806 399.899 153.806 401.851 cv
153.806 403.819 153.454 405.323 152.766 406.347 cv
152.062 407.371 151.07 407.883 149.774 407.883 cv
148.462 407.883 147.454 407.371 146.766 406.347 cv
146.078 405.323 145.742 403.819 145.742 401.851 cv
145.742 399.899 146.078 398.395 146.766 397.355 cv
147.454 396.331 148.462 395.803 149.774 395.803 cv
f
156.574 405.691 mo
158.222 405.691 li
158.222 407.675 li
156.574 407.675 li
156.574 405.691 li
f
165.038 397.051 mo
164.222 397.051 163.614 397.451 163.198 398.251 cv
162.782 399.051 162.59 400.251 162.59 401.851 cv
162.59 403.451 162.782 404.651 163.198 405.451 cv
163.614 406.251 164.222 406.651 165.038 406.651 cv
165.854 406.651 166.462 406.251 166.878 405.451 cv
167.278 404.651 167.486 403.451 167.486 401.851 cv
167.486 400.251 167.278 399.051 166.878 398.251 cv
166.462 397.451 165.854 397.051 165.038 397.051 cv
165.038 395.803 mo
166.334 395.803 167.326 396.331 168.03 397.355 cv
168.718 398.395 169.07 399.899 169.07 401.851 cv
169.07 403.819 168.718 405.323 168.03 406.347 cv
167.326 407.371 166.334 407.883 165.038 407.883 cv
163.726 407.883 162.718 407.371 162.03 406.347 cv
161.342 405.323 161.006 403.819 161.006 401.851 cv
161.006 399.899 161.342 398.395 162.03 397.355 cv
162.718 396.331 163.726 395.803 165.038 395.803 cv
f
171.854 396.011 mo
178.046 396.011 li
178.046 397.339 li
173.294 397.339 li
173.294 400.203 li
173.518 400.123 173.758 400.059 173.982 400.027 cv
174.206 399.995 174.446 399.963 174.67 399.963 cv
175.966 399.963 176.99 400.331 177.758 401.035 cv
178.526 401.755 178.91 402.715 178.91 403.931 cv
178.91 405.195 178.51 406.171 177.726 406.859 cv
176.942 407.547 175.838 407.883 174.43 407.883 cv
173.934 407.883 173.438 407.835 172.926 407.771 cv
172.414 407.691 171.902 407.579 171.358 407.403 cv
171.358 405.819 li
171.822 406.075 172.302 406.267 172.814 406.395 cv
173.31 406.523 173.838 406.571 174.398 406.571 cv
175.294 406.571 176.014 406.347 176.542 405.867 cv
177.054 405.387 177.326 404.747 177.326 403.931 cv
177.326 403.131 177.054 402.491 176.542 402.011 cv
176.014 401.531 175.294 401.291 174.398 401.291 cv
173.982 401.291 173.55 401.339 173.134 401.435 cv
172.718 401.531 172.286 401.675 171.854 401.867 cv
171.854 396.011 li
f
250.56 388.8 mo
250.56 381.8 li
f
250.56 388.8 mo
250.56 381.8 li
@
250.56 43.2 mo
250.56 50.2 li
f
250.56 43.2 mo
250.56 50.2 li
@
238.882 397.051 mo
238.066 397.051 237.458 397.451 237.042 398.251 cv
236.626 399.051 236.434 400.251 236.434 401.851 cv
236.434 403.451 236.626 404.651 237.042 405.451 cv
237.458 406.251 238.066 406.651 238.882 406.651 cv
239.698 406.651 240.306 406.251 240.722 405.451 cv
241.122 404.651 241.33 403.451 241.33 401.851 cv
241.33 400.251 241.122 399.051 240.722 398.251 cv
240.306 397.451 239.698 397.051 238.882 397.051 cv
238.882 395.803 mo
240.178 395.803 241.17 396.331 241.874 397.355 cv
242.562 398.395 242.914 399.899 242.914 401.851 cv
242.914 403.819 242.562 405.323 241.874 406.347 cv
241.17 407.371 240.178 407.883 238.882 407.883 cv
237.57 407.883 236.562 407.371 235.874 406.347 cv
235.186 405.323 234.85 403.819 234.85 401.851 cv
234.85 399.899 235.186 398.395 235.874 397.355 cv
236.562 396.331 237.57 395.803 238.882 395.803 cv
f
245.682 405.691 mo
247.33 405.691 li
247.33 407.675 li
245.682 407.675 li
245.682 405.691 li
f
251.042 406.347 mo
253.618 406.347 li
253.618 397.451 li
250.818 398.011 li
250.818 396.571 li
253.602 396.011 li
255.186 396.011 li
255.186 406.347 li
257.762 406.347 li
257.762 407.675 li
251.042 407.675 li
251.042 406.347 li
f
264.322 397.051 mo
263.506 397.051 262.898 397.451 262.482 398.251 cv
262.066 399.051 261.874 400.251 261.874 401.851 cv
261.874 403.451 262.066 404.651 262.482 405.451 cv
262.898 406.251 263.506 406.651 264.322 406.651 cv
265.138 406.651 265.746 406.251 266.162 405.451 cv
266.562 404.651 266.77 403.451 266.77 401.851 cv
266.77 400.251 266.562 399.051 266.162 398.251 cv
265.746 397.451 265.138 397.051 264.322 397.051 cv
264.322 395.803 mo
265.618 395.803 266.61 396.331 267.314 397.355 cv
268.002 398.395 268.354 399.899 268.354 401.851 cv
268.354 403.819 268.002 405.323 267.314 406.347 cv
266.61 407.371 265.618 407.883 264.322 407.883 cv
263.01 407.883 262.002 407.371 261.314 406.347 cv
260.626 405.323 260.29 403.819 260.29 401.851 cv
260.29 399.899 260.626 398.395 261.314 397.355 cv
262.002 396.331 263.01 395.803 264.322 395.803 cv
f
339.84 388.8 mo
339.84 381.8 li
f
339.84 388.8 mo
339.84 381.8 li
@
339.84 43.2 mo
339.84 50.2 li
f
339.84 43.2 mo
339.84 50.2 li
@
328.334 397.051 mo
327.518 397.051 326.91 397.451 326.494 398.251 cv
326.078 399.051 325.886 400.251 325.886 401.851 cv
325.886 403.451 326.078 404.651 326.494 405.451 cv
326.91 406.251 327.518 406.651 328.334 406.651 cv
329.15 406.651 329.758 406.251 330.174 405.451 cv
330.574 404.651 330.782 403.451 330.782 401.851 cv
330.782 400.251 330.574 399.051 330.174 398.251 cv
329.758 397.451 329.15 397.051 328.334 397.051 cv
328.334 395.803 mo
329.63 395.803 330.622 396.331 331.326 397.355 cv
332.014 398.395 332.366 399.899 332.366 401.851 cv
332.366 403.819 332.014 405.323 331.326 406.347 cv
330.622 407.371 329.63 407.883 328.334 407.883 cv
327.022 407.883 326.014 407.371 325.326 406.347 cv
324.638 405.323 324.302 403.819 324.302 401.851 cv
324.302 399.899 324.638 398.395 325.326 397.355 cv
326.014 396.331 327.022 395.803 328.334 395.803 cv
f
335.134 405.691 mo
336.782 405.691 li
336.782 407.675 li
335.134 407.675 li
335.134 405.691 li
f
340.494 406.347 mo
343.07 406.347 li
343.07 397.451 li
340.27 398.011 li
340.27 396.571 li
343.054 396.011 li
344.638 396.011 li
344.638 406.347 li
347.214 406.347 li
347.214 407.675 li
340.494 407.675 li
340.494 406.347 li
f
350.414 396.011 mo
356.606 396.011 li
356.606 397.339 li
351.854 397.339 li
351.854 400.203 li
352.078 400.123 352.318 400.059 352.542 400.027 cv
352.766 399.995 353.006 399.963 353.23 399.963 cv
354.526 399.963 355.55 400.331 356.318 401.035 cv
357.086 401.755 357.47 402.715 357.47 403.931 cv
357.47 405.195 357.07 406.171 356.286 406.859 cv
355.502 407.547 354.398 407.883 352.99 407.883 cv
352.494 407.883 351.998 407.835 351.486 407.771 cv
350.974 407.691 350.462 407.579 349.918 407.403 cv
349.918 405.819 li
350.382 406.075 350.862 406.267 351.374 406.395 cv
351.87 406.523 352.398 406.571 352.958 406.571 cv
353.854 406.571 354.574 406.347 355.102 405.867 cv
355.614 405.387 355.886 404.747 355.886 403.931 cv
355.886 403.131 355.614 402.491 355.102 402.011 cv
354.574 401.531 353.854 401.291 352.958 401.291 cv
352.542 401.291 352.11 401.339 351.694 401.435 cv
351.278 401.531 350.846 401.675 350.414 401.867 cv
350.414 396.011 li
f
429.12 388.8 mo
429.12 381.8 li
f
429.12 388.8 mo
429.12 381.8 li
@
429.12 43.2 mo
429.12 50.2 li
f
429.12 43.2 mo
429.12 50.2 li
@
417.442 397.051 mo
416.626 397.051 416.018 397.451 415.602 398.251 cv
415.186 399.051 414.994 400.251 414.994 401.851 cv
414.994 403.451 415.186 404.651 415.602 405.451 cv
416.018 406.251 416.626 406.651 417.442 406.651 cv
418.258 406.651 418.866 406.251 419.282 405.451 cv
419.682 404.651 419.89 403.451 419.89 401.851 cv
419.89 400.251 419.682 399.051 419.282 398.251 cv
418.866 397.451 418.258 397.051 417.442 397.051 cv
417.442 395.803 mo
418.738 395.803 419.73 396.331 420.434 397.355 cv
421.122 398.395 421.474 399.899 421.474 401.851 cv
421.474 403.819 421.122 405.323 420.434 406.347 cv
419.73 407.371 418.738 407.883 417.442 407.883 cv
416.13 407.883 415.122 407.371 414.434 406.347 cv
413.746 405.323 413.41 403.819 413.41 401.851 cv
413.41 399.899 413.746 398.395 414.434 397.355 cv
415.122 396.331 416.13 395.803 417.442 395.803 cv
f
424.242 405.691 mo
425.89 405.691 li
425.89 407.675 li
424.242 407.675 li
424.242 405.691 li
f
430.69 406.347 mo
436.194 406.347 li
436.194 407.675 li
428.786 407.675 li
428.786 406.347 li
429.378 405.739 430.194 404.907 431.234 403.851 cv
432.258 402.811 432.914 402.139 433.186 401.835 cv
433.698 401.275 434.05 400.795 434.242 400.395 cv
434.434 400.011 434.546 399.611 434.546 399.227 cv
434.546 398.619 434.322 398.107 433.89 397.723 cv
433.458 397.339 432.898 397.131 432.194 397.131 cv
431.698 397.131 431.17 397.227 430.626 397.387 cv
430.082 397.563 429.49 397.819 428.866 398.171 cv
428.866 396.571 li
429.506 396.315 430.098 396.123 430.642 395.995 cv
431.186 395.867 431.698 395.803 432.162 395.803 cv
433.362 395.803 434.322 396.107 435.042 396.715 cv
435.762 397.323 436.13 398.123 436.13 399.131 cv
436.13 399.611 436.034 400.075 435.858 400.491 cv
435.682 400.923 435.362 401.435 434.882 402.011 cv
434.754 402.171 434.338 402.603 433.634 403.323 cv
432.93 404.043 431.954 405.051 430.69 406.347 cv
f
442.882 397.051 mo
442.066 397.051 441.458 397.451 441.042 398.251 cv
440.626 399.051 440.434 400.251 440.434 401.851 cv
440.434 403.451 440.626 404.651 441.042 405.451 cv
441.458 406.251 442.066 406.651 442.882 406.651 cv
443.698 406.651 444.306 406.251 444.722 405.451 cv
445.122 404.651 445.33 403.451 445.33 401.851 cv
445.33 400.251 445.122 399.051 444.722 398.251 cv
444.306 397.451 443.698 397.051 442.882 397.051 cv
442.882 395.803 mo
444.178 395.803 445.17 396.331 445.874 397.355 cv
446.562 398.395 446.914 399.899 446.914 401.851 cv
446.914 403.819 446.562 405.323 445.874 406.347 cv
445.17 407.371 444.178 407.883 442.882 407.883 cv
441.57 407.883 440.562 407.371 439.874 406.347 cv
439.186 405.323 438.85 403.819 438.85 401.851 cv
438.85 399.899 439.186 398.395 439.874 397.355 cv
440.562 396.331 441.57 395.803 442.882 395.803 cv
f
518.4 388.8 mo
518.4 381.8 li
f
518.4 388.8 mo
518.4 381.8 li
@
518.4 43.2 mo
518.4 50.2 li
f
518.4 43.2 mo
518.4 50.2 li
@
506.894 397.051 mo
506.078 397.051 505.47 397.451 505.054 398.251 cv
504.638 399.051 504.446 400.251 504.446 401.851 cv
504.446 403.451 504.638 404.651 505.054 405.451 cv
505.47 406.251 506.078 406.651 506.894 406.651 cv
507.71 406.651 508.318 406.251 508.734 405.451 cv
509.134 404.651 509.342 403.451 509.342 401.851 cv
509.342 400.251 509.134 399.051 508.734 398.251 cv
508.318 397.451 507.71 397.051 506.894 397.051 cv
506.894 395.803 mo
508.19 395.803 509.182 396.331 509.886 397.355 cv
510.574 398.395 510.926 399.899 510.926 401.851 cv
510.926 403.819 510.574 405.323 509.886 406.347 cv
509.182 407.371 508.19 407.883 506.894 407.883 cv
505.582 407.883 504.574 407.371 503.886 406.347 cv
503.198 405.323 502.862 403.819 502.862 401.851 cv
502.862 399.899 503.198 398.395 503.886 397.355 cv
504.574 396.331 505.582 395.803 506.894 395.803 cv
f
513.694 405.691 mo
515.342 405.691 li
515.342 407.675 li
513.694 407.675 li
513.694 405.691 li
f
520.142 406.347 mo
525.646 406.347 li
525.646 407.675 li
518.238 407.675 li
518.238 406.347 li
518.83 405.739 519.646 404.907 520.686 403.851 cv
521.71 402.811 522.366 402.139 522.638 401.835 cv
523.15 401.275 523.502 400.795 523.694 400.395 cv
523.886 400.011 523.998 399.611 523.998 399.227 cv
523.998 398.619 523.774 398.107 523.342 397.723 cv
522.91 397.339 522.35 397.131 521.646 397.131 cv
521.15 397.131 520.622 397.227 520.078 397.387 cv
519.534 397.563 518.942 397.819 518.318 398.171 cv
518.318 396.571 li
518.958 396.315 519.55 396.123 520.094 395.995 cv
520.638 395.867 521.15 395.803 521.614 395.803 cv
522.814 395.803 523.774 396.107 524.494 396.715 cv
525.214 397.323 525.582 398.123 525.582 399.131 cv
525.582 399.611 525.486 400.075 525.31 400.491 cv
525.134 400.923 524.814 401.435 524.334 402.011 cv
524.206 402.171 523.79 402.603 523.086 403.323 cv
522.382 404.043 521.406 405.051 520.142 406.347 cv
f
528.974 396.011 mo
535.166 396.011 li
535.166 397.339 li
530.414 397.339 li
530.414 400.203 li
530.638 400.123 530.878 400.059 531.102 400.027 cv
531.326 399.995 531.566 399.963 531.79 399.963 cv
533.086 399.963 534.11 400.331 534.878 401.035 cv
535.646 401.755 536.03 402.715 536.03 403.931 cv
536.03 405.195 535.63 406.171 534.846 406.859 cv
534.062 407.547 532.958 407.883 531.55 407.883 cv
531.054 407.883 530.558 407.835 530.046 407.771 cv
529.534 407.691 529.022 407.579 528.478 407.403 cv
528.478 405.819 li
528.942 406.075 529.422 406.267 529.934 406.395 cv
530.43 406.523 530.958 406.571 531.518 406.571 cv
532.414 406.571 533.134 406.347 533.662 405.867 cv
534.174 405.387 534.446 404.747 534.446 403.931 cv
534.446 403.131 534.174 402.491 533.662 402.011 cv
533.134 401.531 532.414 401.291 531.518 401.291 cv
531.102 401.291 530.67 401.339 530.254 401.435 cv
529.838 401.531 529.406 401.675 528.974 401.867 cv
528.974 396.011 li
f
80.464 413.459 mo
88.006 413.459 li
88.006 414.953 li
82.246 414.953 li
82.246 418.823 li
87.448 418.823 li
87.448 420.317 li
82.246 420.317 li
82.246 426.581 li
80.464 426.581 li
80.464 413.459 li
f
96.4515 418.247 mo
96.2715 418.139 96.0735 418.067 95.8575 418.013 cv
95.6415 417.977 95.4075 417.941 95.1555 417.941 cv
94.2375 417.941 93.5355 418.247 93.0495 418.841 cv
92.5455 419.435 92.3115 420.281 92.3115 421.397 cv
92.3115 426.581 li
90.6915 426.581 li
90.6915 416.735 li
92.3115 416.735 li
92.3115 418.265 li
92.6355 417.671 93.0855 417.221 93.6255 416.933 cv
94.1655 416.645 94.8315 416.501 95.6235 416.501 cv
95.7315 416.501 95.8575 416.519 96.0015 416.519 cv
96.1275 416.537 96.2715 416.555 96.4515 416.591 cv
96.4515 418.247 li
f
102.628 421.631 mo
101.314 421.631 100.414 421.793 99.9099 422.081 cv
99.4059 422.387 99.1539 422.891 99.1539 423.611 cv
99.1539 424.187 99.3339 424.655 99.7119 424.979 cv
100.09 425.321 100.612 425.483 101.26 425.483 cv
102.16 425.483 102.88 425.177 103.42 424.529 cv
103.96 423.899 104.23 423.053 104.23 421.991 cv
104.23 421.631 li
102.628 421.631 li
105.85 420.965 mo
105.85 426.581 li
104.23 426.581 li
104.23 425.087 li
103.852 425.699 103.384 426.131 102.844 426.401 cv
102.304 426.671 101.62 426.815 100.828 426.815 cv
99.8199 426.815 99.0099 426.545 98.4159 425.987 cv
97.8219 425.429 97.5339 424.673 97.5339 423.719 cv
97.5339 422.621 97.8939 421.793 98.6499 421.217 cv
99.3879 420.659 100.486 420.371 101.962 420.371 cv
104.23 420.371 li
104.23 420.209 li
104.23 419.471 103.978 418.895 103.492 418.481 cv
103.006 418.085 102.322 417.869 101.44 417.869 cv
100.864 417.869 100.324 417.941 99.7839 418.085 cv
99.2439 418.229 98.7399 418.427 98.2539 418.679 cv
98.2539 417.185 li
98.8299 416.969 99.4059 416.789 99.9639 416.681 cv
100.522 416.573 101.062 416.501 101.602 416.501 cv
103.024 416.501 104.086 416.879 104.788 417.617 cv
105.49 418.355 105.85 419.471 105.85 420.965 cv
f
116.268 417.113 mo
116.268 418.625 li
115.8 418.373 115.35 418.193 114.882 418.067 cv
114.414 417.941 113.964 417.869 113.496 417.869 cv
112.452 417.869 111.624 418.211 111.048 418.877 cv
110.472 419.543 110.184 420.479 110.184 421.667 cv
110.184 422.873 110.472 423.809 111.048 424.475 cv
111.624 425.141 112.452 425.465 113.496 425.465 cv
113.964 425.465 114.414 425.411 114.882 425.285 cv
115.35 425.159 115.8 424.961 116.268 424.709 cv
116.268 426.203 li
115.8 426.419 115.332 426.581 114.864 426.671 cv
114.378 426.761 113.856 426.815 113.316 426.815 cv
111.84 426.815 110.652 426.365 109.788 425.429 cv
108.906 424.511 108.474 423.251 108.474 421.667 cv
108.474 420.065 108.906 418.805 109.788 417.887 cv
110.67 416.969 111.876 416.501 113.424 416.501 cv
113.928 416.501 114.414 416.555 114.882 416.663 cv
115.35 416.771 115.818 416.915 116.268 417.113 cv
f
120.675 413.945 mo
120.675 416.735 li
124.005 416.735 li
124.005 417.995 li
120.675 417.995 li
120.675 423.341 li
120.675 424.151 120.783 424.673 120.999 424.889 cv
121.215 425.123 121.665 425.231 122.349 425.231 cv
124.005 425.231 li
124.005 426.581 li
122.349 426.581 li
121.089 426.581 120.225 426.347 119.757 425.879 cv
119.289 425.411 119.055 424.565 119.055 423.341 cv
119.055 417.995 li
117.867 417.995 li
117.867 416.735 li
119.055 416.735 li
119.055 413.945 li
120.675 413.945 li
f
126.13 416.735 mo
127.75 416.735 li
127.75 426.581 li
126.13 426.581 li
126.13 416.735 li
126.13 412.901 mo
127.75 412.901 li
127.75 414.953 li
126.13 414.953 li
126.13 412.901 li
f
134.947 417.869 mo
134.083 417.869 133.399 418.211 132.895 418.895 cv
132.391 419.579 132.139 420.497 132.139 421.667 cv
132.139 422.855 132.373 423.773 132.877 424.457 cv
133.381 425.141 134.065 425.465 134.947 425.465 cv
135.811 425.465 136.495 425.141 136.999 424.457 cv
137.503 423.773 137.755 422.855 137.755 421.667 cv
137.755 420.515 137.503 419.579 136.999 418.895 cv
136.495 418.211 135.811 417.869 134.947 417.869 cv
134.947 416.501 mo
136.351 416.501 137.449 416.969 138.259 417.869 cv
139.051 418.787 139.465 420.047 139.465 421.667 cv
139.465 423.287 139.051 424.547 138.259 425.447 cv
137.449 426.365 136.351 426.815 134.947 426.815 cv
133.525 426.815 132.409 426.365 131.617 425.447 cv
130.825 424.547 130.429 423.287 130.429 421.667 cv
130.429 420.047 130.825 418.787 131.617 417.869 cv
132.409 416.969 133.525 416.501 134.947 416.501 cv
f
150.334 420.641 mo
150.334 426.581 li
148.714 426.581 li
148.714 420.695 li
148.714 419.759 148.516 419.075 148.156 418.607 cv
147.796 418.139 147.256 417.905 146.536 417.905 cv
145.654 417.905 144.97 418.193 144.466 418.751 cv
143.962 419.309 143.71 420.065 143.71 421.019 cv
143.71 426.581 li
142.09 426.581 li
142.09 416.735 li
143.71 416.735 li
143.71 418.265 li
144.088 417.689 144.538 417.239 145.078 416.951 cv
145.6 416.663 146.212 416.501 146.896 416.501 cv
148.012 416.501 148.876 416.861 149.452 417.563 cv
150.028 418.265 150.334 419.291 150.334 420.641 cv
f
163.09 417.869 mo
162.226 417.869 161.542 418.211 161.038 418.895 cv
160.534 419.579 160.282 420.497 160.282 421.667 cv
160.282 422.855 160.516 423.773 161.02 424.457 cv
161.524 425.141 162.208 425.465 163.09 425.465 cv
163.954 425.465 164.638 425.141 165.142 424.457 cv
165.646 423.773 165.898 422.855 165.898 421.667 cv
165.898 420.515 165.646 419.579 165.142 418.895 cv
164.638 418.211 163.954 417.869 163.09 417.869 cv
163.09 416.501 mo
164.494 416.501 165.592 416.969 166.402 417.869 cv
167.194 418.787 167.608 420.047 167.608 421.667 cv
167.608 423.287 167.194 424.547 166.402 425.447 cv
165.592 426.365 164.494 426.815 163.09 426.815 cv
161.668 426.815 160.552 426.365 159.76 425.447 cv
158.968 424.547 158.572 423.287 158.572 421.667 cv
158.572 420.047 158.968 418.787 159.76 417.869 cv
160.552 416.969 161.668 416.501 163.09 416.501 cv
f
175.273 412.901 mo
175.273 414.251 li
173.725 414.251 li
173.149 414.251 172.735 414.377 172.519 414.611 cv
172.285 414.845 172.177 415.259 172.177 415.871 cv
172.177 416.735 li
174.841 416.735 li
174.841 417.995 li
172.177 417.995 li
172.177 426.581 li
170.557 426.581 li
170.557 417.995 li
169.009 417.995 li
169.009 416.735 li
170.557 416.735 li
170.557 416.051 li
170.557 414.971 170.809 414.161 171.313 413.657 cv
171.817 413.153 172.627 412.901 173.743 412.901 cv
175.273 412.901 li
f
190.283 413.891 mo
190.283 415.619 li
189.599 415.295 188.969 415.061 188.375 414.899 cv
187.763 414.755 187.187 414.665 186.647 414.665 cv
185.675 414.665 184.919 414.863 184.397 415.223 cv
183.875 415.601 183.623 416.141 183.623 416.825 cv
183.623 417.401 183.785 417.851 184.145 418.139 cv
184.487 418.445 185.153 418.679 186.125 418.859 cv
187.205 419.075 li
188.519 419.327 189.491 419.777 190.121 420.407 cv
190.751 421.055 191.075 421.901 191.075 422.963 cv
191.075 424.241 190.643 425.195 189.797 425.843 cv
188.933 426.491 187.691 426.815 186.053 426.815 cv
185.423 426.815 184.757 426.743 184.055 426.617 cv
183.353 426.491 182.633 426.293 181.895 426.005 cv
181.895 424.169 li
182.615 424.583 183.317 424.889 184.001 425.087 cv
184.685 425.303 185.369 425.393 186.053 425.393 cv
187.061 425.393 187.835 425.195 188.393 424.799 cv
188.933 424.403 189.221 423.845 189.221 423.089 cv
189.221 422.441 189.023 421.937 188.627 421.577 cv
188.231 421.217 187.583 420.947 186.683 420.767 cv
185.603 420.551 li
184.271 420.299 183.317 419.885 182.723 419.309 cv
182.129 418.751 181.841 417.977 181.841 416.969 cv
181.841 415.817 182.237 414.899 183.065 414.233 cv
183.875 413.567 185.009 413.225 186.449 413.225 cv
187.061 413.225 187.673 413.279 188.321 413.387 cv
188.951 413.495 189.599 413.675 190.283 413.891 cv
f
195.373 413.945 mo
195.373 416.735 li
198.703 416.735 li
198.703 417.995 li
195.373 417.995 li
195.373 423.341 li
195.373 424.151 195.481 424.673 195.697 424.889 cv
195.913 425.123 196.363 425.231 197.047 425.231 cv
198.703 425.231 li
198.703 426.581 li
197.047 426.581 li
195.787 426.581 194.923 426.347 194.455 425.879 cv
193.987 425.411 193.753 424.565 193.753 423.341 cv
193.753 417.995 li
192.565 417.995 li
192.565 416.735 li
193.753 416.735 li
193.753 413.945 li
195.373 413.945 li
f
205.311 421.631 mo
203.997 421.631 203.097 421.793 202.593 422.081 cv
202.089 422.387 201.837 422.891 201.837 423.611 cv
201.837 424.187 202.017 424.655 202.395 424.979 cv
202.773 425.321 203.295 425.483 203.943 425.483 cv
204.843 425.483 205.563 425.177 206.103 424.529 cv
206.643 423.899 206.913 423.053 206.913 421.991 cv
206.913 421.631 li
205.311 421.631 li
208.533 420.965 mo
208.533 426.581 li
206.913 426.581 li
206.913 425.087 li
206.535 425.699 206.067 426.131 205.527 426.401 cv
204.987 426.671 204.303 426.815 203.511 426.815 cv
202.503 426.815 201.693 426.545 201.099 425.987 cv
200.505 425.429 200.217 424.673 200.217 423.719 cv
200.217 422.621 200.577 421.793 201.333 421.217 cv
202.071 420.659 203.169 420.371 204.645 420.371 cv
206.913 420.371 li
206.913 420.209 li
206.913 419.471 206.661 418.895 206.175 418.481 cv
205.689 418.085 205.005 417.869 204.123 417.869 cv
203.547 417.869 203.007 417.941 202.467 418.085 cv
201.927 418.229 201.423 418.427 200.937 418.679 cv
200.937 417.185 li
201.513 416.969 202.089 416.789 202.647 416.681 cv
203.205 416.573 203.745 416.501 204.285 416.501 cv
205.707 416.501 206.769 416.879 207.471 417.617 cv
208.173 418.355 208.533 419.471 208.533 420.965 cv
f
217.565 418.247 mo
217.385 418.139 217.187 418.067 216.971 418.013 cv
216.755 417.977 216.521 417.941 216.269 417.941 cv
215.351 417.941 214.649 418.247 214.163 418.841 cv
213.659 419.435 213.425 420.281 213.425 421.397 cv
213.425 426.581 li
211.805 426.581 li
211.805 416.735 li
213.425 416.735 li
213.425 418.265 li
213.749 417.671 214.199 417.221 214.739 416.933 cv
215.279 416.645 215.945 416.501 216.737 416.501 cv
216.845 416.501 216.971 416.519 217.115 416.519 cv
217.241 416.537 217.385 416.555 217.565 416.591 cv
217.565 418.247 li
f
225.541 417.023 mo
225.541 418.553 li
225.073 418.337 224.605 418.157 224.119 418.031 cv
223.615 417.923 223.111 417.851 222.589 417.851 cv
221.779 417.851 221.167 417.977 220.771 418.229 cv
220.375 418.481 220.177 418.841 220.177 419.327 cv
220.177 419.705 220.321 419.993 220.609 420.209 cv
220.897 420.425 221.473 420.641 222.337 420.821 cv
222.895 420.947 li
224.047 421.199 224.857 421.559 225.343 421.991 cv
225.811 422.441 226.063 423.071 226.063 423.863 cv
226.063 424.781 225.703 425.501 224.983 426.023 cv
224.263 426.563 223.255 426.815 221.995 426.815 cv
221.455 426.815 220.915 426.761 220.339 426.671 cv
219.763 426.581 219.169 426.437 218.539 426.221 cv
218.539 424.547 li
219.133 424.871 219.727 425.105 220.303 425.249 cv
220.879 425.411 221.455 425.483 222.031 425.483 cv
222.787 425.483 223.381 425.357 223.795 425.105 cv
224.191 424.853 224.407 424.475 224.407 423.989 cv
224.407 423.557 224.245 423.215 223.957 422.981 cv
223.669 422.747 223.021 422.513 222.013 422.297 cv
221.455 422.171 li
220.447 421.955 219.709 421.631 219.277 421.199 cv
218.827 420.767 218.611 420.173 218.611 419.399 cv
218.611 418.481 218.935 417.761 219.583 417.257 cv
220.231 416.753 221.167 416.501 222.391 416.501 cv
222.985 416.501 223.543 416.555 224.083 416.645 cv
224.605 416.735 225.091 416.861 225.541 417.023 cv
f
234.431 413.459 mo
236.213 413.459 li
236.213 418.841 li
242.657 418.841 li
242.657 413.459 li
244.439 413.459 li
244.439 426.581 li
242.657 426.581 li
242.657 420.335 li
236.213 420.335 li
236.213 426.581 li
234.431 426.581 li
234.431 413.459 li
f
251.71 417.869 mo
250.846 417.869 250.162 418.211 249.658 418.895 cv
249.154 419.579 248.902 420.497 248.902 421.667 cv
248.902 422.855 249.136 423.773 249.64 424.457 cv
250.144 425.141 250.828 425.465 251.71 425.465 cv
252.574 425.465 253.258 425.141 253.762 424.457 cv
254.266 423.773 254.518 422.855 254.518 421.667 cv
254.518 420.515 254.266 419.579 253.762 418.895 cv
253.258 418.211 252.574 417.869 251.71 417.869 cv
251.71 416.501 mo
253.114 416.501 254.212 416.969 255.022 417.869 cv
255.814 418.787 256.228 420.047 256.228 421.667 cv
256.228 423.287 255.814 424.547 255.022 425.447 cv
254.212 426.365 253.114 426.815 251.71 426.815 cv
250.288 426.815 249.172 426.365 248.38 425.447 cv
247.588 424.547 247.192 423.287 247.192 421.667 cv
247.192 420.047 247.588 418.787 248.38 417.869 cv
249.172 416.969 250.288 416.501 251.71 416.501 cv
f
265.189 417.023 mo
265.189 418.553 li
264.721 418.337 264.253 418.157 263.767 418.031 cv
263.263 417.923 262.759 417.851 262.237 417.851 cv
261.427 417.851 260.815 417.977 260.419 418.229 cv
260.023 418.481 259.825 418.841 259.825 419.327 cv
259.825 419.705 259.969 419.993 260.257 420.209 cv
260.545 420.425 261.121 420.641 261.985 420.821 cv
262.543 420.947 li
263.695 421.199 264.505 421.559 264.991 421.991 cv
265.459 422.441 265.711 423.071 265.711 423.863 cv
265.711 424.781 265.351 425.501 264.631 426.023 cv
263.911 426.563 262.903 426.815 261.643 426.815 cv
261.103 426.815 260.563 426.761 259.987 426.671 cv
259.411 426.581 258.817 426.437 258.187 426.221 cv
258.187 424.547 li
258.781 424.871 259.375 425.105 259.951 425.249 cv
260.527 425.411 261.103 425.483 261.679 425.483 cv
262.435 425.483 263.029 425.357 263.443 425.105 cv
263.839 424.853 264.055 424.475 264.055 423.989 cv
264.055 423.557 263.893 423.215 263.605 422.981 cv
263.317 422.747 262.669 422.513 261.661 422.297 cv
261.103 422.171 li
260.095 421.955 259.357 421.631 258.925 421.199 cv
258.475 420.767 258.259 420.173 258.259 419.399 cv
258.259 418.481 258.583 417.761 259.231 417.257 cv
259.879 416.753 260.815 416.501 262.039 416.501 cv
262.633 416.501 263.191 416.555 263.731 416.645 cv
264.253 416.735 264.739 416.861 265.189 417.023 cv
f
269.887 413.945 mo
269.887 416.735 li
273.217 416.735 li
273.217 417.995 li
269.887 417.995 li
269.887 423.341 li
269.887 424.151 269.995 424.673 270.211 424.889 cv
270.427 425.123 270.877 425.231 271.561 425.231 cv
273.217 425.231 li
273.217 426.581 li
271.561 426.581 li
270.301 426.581 269.437 426.347 268.969 425.879 cv
268.501 425.411 268.267 424.565 268.267 423.341 cv
268.267 417.995 li
267.079 417.995 li
267.079 416.735 li
268.267 416.735 li
268.267 413.945 li
269.887 413.945 li
f
275.342 416.735 mo
276.962 416.735 li
276.962 426.581 li
275.342 426.581 li
275.342 416.735 li
275.342 412.901 mo
276.962 412.901 li
276.962 414.953 li
275.342 414.953 li
275.342 412.901 li
f
288.533 420.641 mo
288.533 426.581 li
286.913 426.581 li
286.913 420.695 li
286.913 419.759 286.715 419.075 286.355 418.607 cv
285.995 418.139 285.455 417.905 284.735 417.905 cv
283.853 417.905 283.169 418.193 282.665 418.751 cv
282.161 419.309 281.909 420.065 281.909 421.019 cv
281.909 426.581 li
280.289 426.581 li
280.289 416.735 li
281.909 416.735 li
281.909 418.265 li
282.287 417.689 282.737 417.239 283.277 416.951 cv
283.799 416.663 284.411 416.501 285.095 416.501 cv
286.211 416.501 287.075 416.861 287.651 417.563 cv
288.227 418.265 288.533 419.291 288.533 420.641 cv
f
298.231 421.541 mo
298.231 420.389 297.979 419.471 297.511 418.823 cv
297.025 418.175 296.341 417.851 295.477 417.851 cv
294.613 417.851 293.929 418.175 293.443 418.823 cv
292.957 419.471 292.723 420.389 292.723 421.541 cv
292.723 422.711 292.957 423.611 293.443 424.259 cv
293.929 424.907 294.613 425.231 295.477 425.231 cv
296.341 425.231 297.025 424.907 297.511 424.259 cv
297.979 423.611 298.231 422.711 298.231 421.541 cv
299.851 425.357 mo
299.851 427.013 299.473 428.255 298.735 429.083 cv
297.979 429.893 296.845 430.307 295.315 430.307 cv
294.739 430.307 294.217 430.253 293.713 430.181 cv
293.209 430.091 292.705 429.965 292.237 429.785 cv
292.237 428.219 li
292.705 428.471 293.173 428.651 293.641 428.777 cv
294.109 428.903 294.577 428.975 295.063 428.975 cv
296.107 428.975 296.899 428.687 297.439 428.147 cv
297.961 427.589 298.231 426.761 298.231 425.645 cv
298.231 424.853 li
297.889 425.429 297.457 425.861 296.935 426.149 cv
296.413 426.437 295.801 426.581 295.081 426.581 cv
293.857 426.581 292.885 426.131 292.147 425.213 cv
291.409 424.295 291.049 423.071 291.049 421.541 cv
291.049 420.029 291.409 418.805 292.147 417.887 cv
292.885 416.969 293.857 416.501 295.081 416.501 cv
295.801 416.501 296.413 416.645 296.935 416.933 cv
297.457 417.221 297.889 417.653 298.231 418.229 cv
298.231 416.735 li
299.851 416.735 li
299.851 425.357 li
f
308.881 426.581 mo
308.881 425.951 li
310.375 425.951 311.131 425.771 311.131 425.375 cv
311.131 415.925 li
310.501 416.231 309.709 416.375 308.773 416.375 cv
308.773 415.745 li
310.231 415.745 311.347 415.367 312.103 414.593 cv
312.355 414.593 li
312.481 414.647 li
312.535 414.755 li
312.535 425.375 li
312.535 425.771 313.273 425.951 314.785 425.951 cv
314.785 426.581 li
308.881 426.581 li
f
317.125 426.581 mo
316.999 426.581 316.945 426.509 316.945 426.347 cv
316.981 426.203 li
317.035 426.023 li
317.179 425.951 li
318.313 425.951 318.979 425.591 319.177 424.853 cv
321.517 415.457 li
321.535 415.349 321.553 415.259 321.553 415.205 cv
321.553 415.079 321.481 415.007 321.337 414.989 cv
321.103 414.953 320.671 414.917 320.041 414.917 cv
319.915 414.917 319.861 414.845 319.861 414.683 cv
319.897 414.521 li
319.969 414.359 li
320.095 414.287 li
323.263 414.287 li
323.389 414.287 323.461 414.359 323.497 414.485 cv
324.901 424.799 li
331.453 414.485 li
331.525 414.359 331.651 414.287 331.795 414.287 cv
334.855 414.287 li
334.963 414.287 335.035 414.377 335.035 414.521 cv
334.981 414.683 li
334.909 414.863 li
334.801 414.917 li
334.063 414.917 333.559 414.971 333.271 415.043 cv
333.109 415.097 333.001 415.259 332.929 415.529 cv
330.463 425.411 li
330.427 425.537 330.427 425.627 330.427 425.663 cv
330.445 425.789 li
330.499 425.843 li
330.643 425.879 li
330.859 425.933 331.291 425.951 331.939 425.951 cv
332.047 425.951 332.119 426.041 332.119 426.185 cv
332.065 426.365 332.029 426.473 332.011 426.509 cv
331.975 426.563 331.921 426.581 331.813 426.581 cv
327.115 426.581 li
326.989 426.581 326.935 426.509 326.935 426.347 cv
326.971 426.185 li
327.043 426.023 li
327.169 425.951 li
327.889 425.951 328.411 425.915 328.699 425.825 cv
328.843 425.789 328.969 425.627 329.041 425.339 cv
331.633 414.917 li
324.361 426.383 li
324.289 426.527 324.163 426.581 324.001 426.581 cv
323.839 426.581 323.749 426.527 323.749 426.383 cv
322.219 415.061 li
319.753 424.925 li
319.717 425.051 li
319.699 425.195 li
319.699 425.519 319.825 425.717 320.095 425.807 cv
320.365 425.915 320.707 425.951 321.103 425.951 cv
321.211 425.951 321.283 426.041 321.283 426.185 cv
321.247 426.347 321.211 426.455 321.175 426.509 cv
321.139 426.563 321.085 426.581 320.977 426.581 cv
317.125 426.581 li
f
335.044 430.417 mo
335.12 430.656 335.271 430.833 335.498 430.946 cv
335.712 431.072 335.951 431.122 336.216 431.122 cv
336.468 431.122 336.72 431.034 336.972 430.858 cv
337.224 430.682 337.426 430.442 337.602 430.165 cv
337.766 429.888 337.879 429.623 337.955 429.346 cv
339.442 423.386 li
339.454 423.311 li
339.467 423.26 li
339.366 423.096 li
339.139 423.046 338.698 423.008 338.018 423.008 cv
337.93 423.008 337.892 422.958 337.892 422.844 cv
337.93 422.693 li
337.98 422.605 li
338.106 422.567 li
341.521 422.567 li
341.596 422.567 341.647 422.63 341.647 422.731 cv
341.609 422.92 341.558 423.008 341.483 423.008 cv
341.18 423.008 340.966 423.033 340.815 423.084 cv
340.664 423.134 340.55 423.247 340.5 423.437 cv
339.013 429.396 li
338.912 429.787 338.723 430.14 338.434 430.455 cv
338.144 430.77 337.804 431.009 337.4 431.173 cv
336.997 431.349 336.607 431.438 336.203 431.438 cv
335.75 431.438 335.359 431.312 335.032 431.072 cv
334.704 430.833 334.54 430.505 334.54 430.077 cv
334.54 429.799 334.616 429.56 334.767 429.359 cv
334.918 429.157 335.132 429.056 335.41 429.056 cv
335.561 429.056 335.699 429.107 335.813 429.207 cv
335.914 429.308 335.977 429.434 335.977 429.585 cv
335.977 429.812 335.888 430.014 335.725 430.178 cv
335.548 430.354 335.359 430.43 335.132 430.43 cv
335.044 430.417 li
f
348.481 422.387 mo
348.355 422.351 348.301 422.243 348.301 422.081 cv
348.301 421.937 348.373 421.811 348.535 421.739 cv
358.813 416.897 li
358.939 416.861 li
359.047 416.861 359.119 416.897 359.191 416.969 cv
359.263 417.041 359.299 417.131 359.299 417.221 cv
359.299 417.365 359.227 417.491 359.083 417.563 cv
349.507 422.081 li
359.137 426.617 li
359.245 426.653 359.299 426.743 359.299 426.923 cv
359.191 427.175 li
359.119 427.247 359.047 427.283 358.939 427.283 cv
358.813 427.247 li
348.481 422.387 li
f
362.338 426.275 mo
362.356 426.113 li
363.706 420.749 li
363.778 420.425 363.832 420.119 363.832 419.867 cv
363.832 419.363 363.652 419.093 363.31 419.093 cv
362.932 419.093 362.644 419.327 362.464 419.777 cv
362.284 420.227 362.104 420.785 361.942 421.469 cv
361.888 421.559 li
361.798 421.577 li
361.582 421.577 li
361.474 421.523 li
361.438 421.397 li
361.564 420.875 361.69 420.425 361.816 420.065 cv
361.924 419.705 362.122 419.381 362.374 419.075 cv
362.626 418.787 362.932 418.625 363.328 418.625 cv
363.76 418.625 364.156 418.769 364.516 419.057 cv
364.858 419.345 365.038 419.705 365.038 420.137 cv
365.398 419.669 365.812 419.309 366.298 419.039 cv
366.766 418.769 367.288 418.625 367.828 418.625 cv
368.386 418.625 368.872 418.769 369.286 419.057 cv
369.7 419.345 369.916 419.759 369.916 420.299 cv
370.276 419.777 370.708 419.363 371.212 419.075 cv
371.698 418.787 372.238 418.625 372.832 418.625 cv
373.444 418.625 373.948 418.805 374.326 419.129 cv
374.704 419.471 374.902 419.957 374.902 420.569 cv
374.902 421.073 374.776 421.667 374.56 422.351 cv
374.344 423.053 374.074 423.827 373.75 424.691 cv
373.57 425.123 373.498 425.483 373.498 425.771 cv
373.498 426.131 373.624 426.311 373.912 426.311 cv
374.38 426.311 374.758 426.059 375.082 425.555 cv
375.388 425.051 375.604 424.511 375.748 423.935 cv
375.892 423.827 li
376.108 423.827 li
376.216 423.881 li
376.27 423.989 li
376.252 424.043 li
376.072 424.727 375.784 425.357 375.388 425.915 cv
374.992 426.491 374.488 426.761 373.876 426.761 cv
373.444 426.761 373.084 426.617 372.796 426.347 cv
372.49 426.059 372.346 425.717 372.346 425.285 cv
372.346 425.087 372.382 424.853 372.49 424.583 cv
372.814 423.683 373.102 422.891 373.336 422.171 cv
373.552 421.469 373.678 420.839 373.678 420.299 cv
373.678 419.975 373.606 419.687 373.48 419.453 cv
373.336 419.219 373.12 419.093 372.796 419.093 cv
372.148 419.093 371.572 419.309 371.086 419.705 cv
370.6 420.101 370.186 420.641 369.844 421.289 cv
369.808 421.415 369.79 421.505 369.79 421.559 cv
368.638 426.185 li
368.584 426.365 368.494 426.491 368.35 426.599 cv
368.206 426.707 368.044 426.761 367.882 426.761 cv
367.738 426.761 367.612 426.707 367.504 426.635 cv
367.396 426.563 367.342 426.437 367.342 426.275 cv
367.36 426.113 li
368.512 421.523 li
368.62 421.037 368.692 420.623 368.692 420.299 cv
368.692 419.975 368.62 419.687 368.476 419.453 cv
368.332 419.219 368.116 419.093 367.792 419.093 cv
367.342 419.093 366.928 419.201 366.568 419.381 cv
366.208 419.579 365.884 419.831 365.614 420.155 cv
365.326 420.479 365.074 420.857 364.858 421.289 cv
363.634 426.185 li
363.598 426.365 363.508 426.491 363.364 426.599 cv
363.22 426.707 363.058 426.761 362.878 426.761 cv
362.734 426.761 362.608 426.707 362.5 426.635 cv
362.392 426.563 362.338 426.437 362.338 426.275 cv
f
381.589 422.387 mo
381.463 422.351 381.409 422.243 381.409 422.081 cv
381.409 421.937 381.481 421.811 381.643 421.739 cv
391.921 416.897 li
392.047 416.861 li
392.155 416.861 392.227 416.897 392.299 416.969 cv
392.371 417.041 392.407 417.131 392.407 417.221 cv
392.407 417.365 392.335 417.491 392.191 417.563 cv
382.615 422.081 li
392.245 426.617 li
392.353 426.653 392.407 426.743 392.407 426.923 cv
392.299 427.175 li
392.227 427.247 392.155 427.283 392.047 427.283 cv
391.921 427.247 li
381.589 422.387 li
f
395.734 426.581 mo
395.734 425.951 li
397.228 425.951 397.984 425.771 397.984 425.375 cv
397.984 415.925 li
397.354 416.231 396.562 416.375 395.626 416.375 cv
395.626 415.745 li
397.084 415.745 398.2 415.367 398.956 414.593 cv
399.208 414.593 li
399.334 414.647 li
399.388 414.755 li
399.388 425.375 li
399.388 425.771 400.126 425.951 401.638 425.951 cv
401.638 426.581 li
395.734 426.581 li
f
404.77 425.195 mo
405.058 425.609 405.436 425.915 405.904 426.113 cv
406.372 426.311 406.894 426.401 407.434 426.401 cv
408.118 426.401 408.622 426.113 408.91 425.519 cv
409.198 424.925 409.36 424.241 409.36 423.485 cv
409.36 423.161 409.324 422.819 409.27 422.477 cv
409.198 422.135 409.09 421.811 408.946 421.523 cv
408.802 421.235 408.604 421.001 408.352 420.821 cv
408.1 420.641 407.776 420.551 407.416 420.551 cv
406.228 420.551 li
406.12 420.551 406.066 420.497 406.066 420.389 cv
406.066 420.227 li
406.066 420.137 406.12 420.083 406.228 420.083 cv
407.218 420.011 li
407.632 420.011 407.974 419.867 408.262 419.543 cv
408.55 419.219 408.748 418.841 408.874 418.373 cv
409 417.923 409.072 417.491 409.072 417.077 cv
409.072 416.501 408.928 416.033 408.658 415.673 cv
408.388 415.313 407.974 415.115 407.434 415.115 cv
406.966 415.115 406.534 415.205 406.12 415.385 cv
405.706 415.565 405.382 415.817 405.13 416.159 cv
405.184 416.141 li
405.256 416.141 li
405.526 416.141 405.76 416.249 405.94 416.429 cv
406.12 416.609 406.21 416.843 406.21 417.095 cv
406.21 417.365 406.12 417.599 405.94 417.779 cv
405.76 417.959 405.526 418.049 405.256 418.049 cv
404.986 418.049 404.752 417.959 404.572 417.779 cv
404.392 417.599 404.302 417.365 404.302 417.095 cv
404.302 416.591 404.446 416.141 404.77 415.763 cv
405.076 415.385 405.472 415.097 405.958 414.899 cv
406.444 414.701 406.93 414.593 407.434 414.593 cv
407.794 414.593 408.172 414.647 408.586 414.755 cv
408.982 414.863 409.36 415.025 409.684 415.223 cv
410.008 415.439 410.278 415.691 410.494 415.997 cv
410.692 416.321 410.8 416.681 410.8 417.077 cv
410.8 417.581 410.674 418.049 410.458 418.481 cv
410.242 418.913 409.936 419.273 409.54 419.579 cv
409.144 419.903 408.712 420.137 408.244 420.281 cv
408.766 420.389 409.27 420.587 409.738 420.875 cv
410.206 421.163 410.566 421.541 410.854 421.991 cv
411.142 422.459 411.286 422.945 411.286 423.467 cv
411.286 424.133 411.088 424.727 410.728 425.267 cv
410.368 425.807 409.882 426.239 409.306 426.527 cv
408.712 426.815 408.082 426.959 407.434 426.959 cv
406.858 426.959 406.3 426.851 405.742 426.635 cv
405.166 426.437 404.716 426.131 404.356 425.699 cv
403.996 425.267 403.816 424.763 403.816 424.151 cv
403.816 423.863 403.906 423.611 404.104 423.413 cv
404.302 423.215 404.554 423.107 404.86 423.107 cv
405.04 423.107 405.22 423.161 405.382 423.251 cv
405.544 423.341 405.67 423.467 405.76 423.629 cv
405.85 423.809 405.904 423.971 405.904 424.151 cv
405.904 424.457 405.796 424.709 405.598 424.907 cv
405.382 425.105 405.148 425.195 404.86 425.195 cv
404.77 425.195 li
f
412.978 426.581 mo
412.852 426.581 412.798 426.509 412.798 426.347 cv
412.834 426.203 li
412.888 426.023 li
413.032 425.951 li
414.166 425.951 414.832 425.591 415.03 424.853 cv
417.37 415.457 li
417.388 415.349 417.406 415.259 417.406 415.205 cv
417.406 415.079 417.334 415.007 417.19 414.989 cv
416.956 414.953 416.524 414.917 415.894 414.917 cv
415.768 414.917 415.714 414.845 415.714 414.683 cv
415.75 414.521 li
415.822 414.359 li
415.948 414.287 li
419.116 414.287 li
419.242 414.287 419.314 414.359 419.35 414.485 cv
420.754 424.799 li
427.306 414.485 li
427.378 414.359 427.504 414.287 427.648 414.287 cv
430.708 414.287 li
430.816 414.287 430.888 414.377 430.888 414.521 cv
430.834 414.683 li
430.762 414.863 li
430.654 414.917 li
429.916 414.917 429.412 414.971 429.124 415.043 cv
428.962 415.097 428.854 415.259 428.782 415.529 cv
426.316 425.411 li
426.28 425.537 426.28 425.627 426.28 425.663 cv
426.298 425.789 li
426.352 425.843 li
426.496 425.879 li
426.712 425.933 427.144 425.951 427.792 425.951 cv
427.9 425.951 427.972 426.041 427.972 426.185 cv
427.918 426.365 427.882 426.473 427.864 426.509 cv
427.828 426.563 427.774 426.581 427.666 426.581 cv
422.968 426.581 li
422.842 426.581 422.788 426.509 422.788 426.347 cv
422.824 426.185 li
422.896 426.023 li
423.022 425.951 li
423.742 425.951 424.264 425.915 424.552 425.825 cv
424.696 425.789 424.822 425.627 424.894 425.339 cv
427.486 414.917 li
420.214 426.383 li
420.142 426.527 420.016 426.581 419.854 426.581 cv
419.692 426.581 419.602 426.527 419.602 426.383 cv
418.072 415.061 li
415.606 424.925 li
415.57 425.051 li
415.552 425.195 li
415.552 425.519 415.678 425.717 415.948 425.807 cv
416.218 425.915 416.56 425.951 416.956 425.951 cv
417.064 425.951 417.136 426.041 417.136 426.185 cv
417.1 426.347 417.064 426.455 417.028 426.509 cv
416.992 426.563 416.938 426.581 416.83 426.581 cv
412.978 426.581 li
f
430.897 430.417 mo
430.973 430.656 431.124 430.833 431.351 430.946 cv
431.565 431.072 431.804 431.122 432.069 431.122 cv
432.321 431.122 432.573 431.034 432.825 430.858 cv
433.077 430.682 433.279 430.442 433.455 430.165 cv
433.619 429.888 433.732 429.623 433.808 429.346 cv
435.295 423.386 li
435.307 423.311 li
435.32 423.26 li
435.219 423.096 li
434.992 423.046 434.551 423.008 433.871 423.008 cv
433.783 423.008 433.745 422.958 433.745 422.844 cv
433.783 422.693 li
433.833 422.605 li
433.959 422.567 li
437.374 422.567 li
437.449 422.567 437.5 422.63 437.5 422.731 cv
437.462 422.92 437.411 423.008 437.336 423.008 cv
437.033 423.008 436.819 423.033 436.668 423.084 cv
436.517 423.134 436.403 423.247 436.353 423.437 cv
434.866 429.396 li
434.765 429.787 434.576 430.14 434.287 430.455 cv
433.997 430.77 433.657 431.009 433.253 431.173 cv
432.85 431.349 432.46 431.438 432.056 431.438 cv
431.603 431.438 431.212 431.312 430.885 431.072 cv
430.557 430.833 430.393 430.505 430.393 430.077 cv
430.393 429.799 430.469 429.56 430.62 429.359 cv
430.771 429.157 430.985 429.056 431.263 429.056 cv
431.414 429.056 431.552 429.107 431.666 429.207 cv
431.767 429.308 431.83 429.434 431.83 429.585 cv
431.83 429.812 431.741 430.014 431.578 430.178 cv
431.401 430.354 431.212 430.43 430.985 430.43 cv
430.897 430.417 li
f
448.767 414.917 mo
448.767 419.849 li
450.999 419.849 li
451.827 419.849 452.457 419.651 452.907 419.219 cv
453.357 418.787 453.591 418.175 453.591 417.383 cv
453.591 416.591 453.357 415.997 452.907 415.565 cv
452.457 415.133 451.827 414.917 450.999 414.917 cv
448.767 414.917 li
446.985 413.459 mo
450.999 413.459 li
452.457 413.459 453.573 413.801 454.329 414.467 cv
455.085 415.133 455.463 416.105 455.463 417.383 cv
455.463 418.679 455.085 419.669 454.329 420.317 cv
453.573 420.983 452.457 421.307 450.999 421.307 cv
448.767 421.307 li
448.767 426.581 li
446.985 426.581 li
446.985 413.459 li
f
457.768 412.901 mo
459.388 412.901 li
459.388 426.581 li
457.768 426.581 li
457.768 412.901 li
f
467.251 421.631 mo
465.937 421.631 465.037 421.793 464.533 422.081 cv
464.029 422.387 463.777 422.891 463.777 423.611 cv
463.777 424.187 463.957 424.655 464.335 424.979 cv
464.713 425.321 465.235 425.483 465.883 425.483 cv
466.783 425.483 467.503 425.177 468.043 424.529 cv
468.583 423.899 468.853 423.053 468.853 421.991 cv
468.853 421.631 li
467.251 421.631 li
470.473 420.965 mo
470.473 426.581 li
468.853 426.581 li
468.853 425.087 li
468.475 425.699 468.007 426.131 467.467 426.401 cv
466.927 426.671 466.243 426.815 465.451 426.815 cv
464.443 426.815 463.633 426.545 463.039 425.987 cv
462.445 425.429 462.157 424.673 462.157 423.719 cv
462.157 422.621 462.517 421.793 463.273 421.217 cv
464.011 420.659 465.109 420.371 466.585 420.371 cv
468.853 420.371 li
468.853 420.209 li
468.853 419.471 468.601 418.895 468.115 418.481 cv
467.629 418.085 466.945 417.869 466.063 417.869 cv
465.487 417.869 464.947 417.941 464.407 418.085 cv
463.867 418.229 463.363 418.427 462.877 418.679 cv
462.877 417.185 li
463.453 416.969 464.029 416.789 464.587 416.681 cv
465.145 416.573 465.685 416.501 466.225 416.501 cv
467.647 416.501 468.709 416.879 469.411 417.617 cv
470.113 418.355 470.473 419.471 470.473 420.965 cv
f
481.989 420.641 mo
481.989 426.581 li
480.369 426.581 li
480.369 420.695 li
480.369 419.759 480.171 419.075 479.811 418.607 cv
479.451 418.139 478.911 417.905 478.191 417.905 cv
477.309 417.905 476.625 418.193 476.121 418.751 cv
475.617 419.309 475.365 420.065 475.365 421.019 cv
475.365 426.581 li
473.745 426.581 li
473.745 416.735 li
475.365 416.735 li
475.365 418.265 li
475.743 417.689 476.193 417.239 476.733 416.951 cv
477.255 416.663 477.867 416.501 478.551 416.501 cv
479.667 416.501 480.531 416.861 481.107 417.563 cv
481.683 418.265 481.989 419.291 481.989 420.641 cv
f
493.631 421.253 mo
493.631 422.045 li
486.197 422.045 li
486.269 423.161 486.593 424.025 487.205 424.601 cv
487.799 425.177 488.627 425.465 489.707 425.465 cv
490.319 425.465 490.931 425.393 491.507 425.249 cv
492.083 425.105 492.677 424.871 493.253 424.547 cv
493.253 426.077 li
492.677 426.329 492.083 426.527 491.471 426.635 cv
490.859 426.743 490.229 426.815 489.617 426.815 cv
488.033 426.815 486.791 426.365 485.873 425.465 cv
484.955 424.565 484.505 423.323 484.505 421.757 cv
484.505 420.155 484.937 418.877 485.801 417.923 cv
486.665 416.987 487.853 416.501 489.329 416.501 cv
490.661 416.501 491.705 416.933 492.479 417.779 cv
493.235 418.643 493.631 419.795 493.631 421.253 cv
492.011 420.785 mo
491.993 419.903 491.741 419.201 491.273 418.661 cv
490.787 418.139 490.139 417.869 489.347 417.869 cv
488.447 417.869 487.727 418.139 487.187 418.643 cv
486.647 419.147 486.323 419.867 486.251 420.785 cv
492.011 420.785 li
f
497.883 413.945 mo
497.883 416.735 li
501.213 416.735 li
501.213 417.995 li
497.883 417.995 li
497.883 423.341 li
497.883 424.151 497.991 424.673 498.207 424.889 cv
498.423 425.123 498.873 425.231 499.557 425.231 cv
501.213 425.231 li
501.213 426.581 li
499.557 426.581 li
498.297 426.581 497.433 426.347 496.965 425.879 cv
496.497 425.411 496.263 424.565 496.263 423.341 cv
496.263 417.995 li
495.075 417.995 li
495.075 416.735 li
496.263 416.735 li
496.263 413.945 li
497.883 413.945 li
f
509.621 417.023 mo
509.621 418.553 li
509.153 418.337 508.685 418.157 508.199 418.031 cv
507.695 417.923 507.191 417.851 506.669 417.851 cv
505.859 417.851 505.247 417.977 504.851 418.229 cv
504.455 418.481 504.257 418.841 504.257 419.327 cv
504.257 419.705 504.401 419.993 504.689 420.209 cv
504.977 420.425 505.553 420.641 506.417 420.821 cv
506.975 420.947 li
508.127 421.199 508.937 421.559 509.423 421.991 cv
509.891 422.441 510.143 423.071 510.143 423.863 cv
510.143 424.781 509.783 425.501 509.063 426.023 cv
508.343 426.563 507.335 426.815 506.075 426.815 cv
505.535 426.815 504.995 426.761 504.419 426.671 cv
503.843 426.581 503.249 426.437 502.619 426.221 cv
502.619 424.547 li
503.213 424.871 503.807 425.105 504.383 425.249 cv
504.959 425.411 505.535 425.483 506.111 425.483 cv
506.867 425.483 507.461 425.357 507.875 425.105 cv
508.271 424.853 508.487 424.475 508.487 423.989 cv
508.487 423.557 508.325 423.215 508.037 422.981 cv
507.749 422.747 507.101 422.513 506.093 422.297 cv
505.535 422.171 li
504.527 421.955 503.789 421.631 503.357 421.199 cv
502.907 420.767 502.691 420.173 502.691 419.399 cv
502.691 418.481 503.015 417.761 503.663 417.257 cv
504.311 416.753 505.247 416.501 506.471 416.501 cv
507.065 416.501 507.623 416.555 508.163 416.645 cv
508.685 416.735 509.171 416.861 509.621 417.023 cv
f
72 388.8 mo
79 388.8 li
f
72 388.8 mo
79 388.8 li
@
518.4 388.8 mo
511.4 388.8 li
f
518.4 388.8 mo
511.4 388.8 li
@
72 319.68 mo
79 319.68 li
f
72 319.68 mo
79 319.68 li
@
518.4 319.68 mo
511.4 319.68 li
f
518.4 319.68 mo
511.4 319.68 li
@
72 250.56 mo
79 250.56 li
f
72 250.56 mo
79 250.56 li
@
518.4 250.56 mo
511.4 250.56 li
f
518.4 250.56 mo
511.4 250.56 li
@
72 181.44 mo
79 181.44 li
f
72 181.44 mo
79 181.44 li
@
518.4 181.44 mo
511.4 181.44 li
f
518.4 181.44 mo
511.4 181.44 li
@
72 112.32 mo
79 112.32 li
f
72 112.32 mo
79 112.32 li
@
518.4 112.32 mo
511.4 112.32 li
f
518.4 112.32 mo
511.4 112.32 li
@
72 43.2 mo
79 43.2 li
f
72 43.2 mo
79 43.2 li
@
518.4 43.2 mo
511.4 43.2 li
f
518.4 43.2 mo
511.4 43.2 li
@
52.8787 300.143 mo
53.0387 299.723 53.3387 299.303 53.7987 298.903 cv
54.2787 298.503 54.9188 298.103 55.7388 297.703 cv
59.7188 295.703 li
59.7188 297.823 li
55.9787 299.683 li
55.0187 300.163 54.3587 300.643 54.0387 301.083 cv
53.7188 301.543 53.5588 302.163 53.5588 302.943 cv
53.5588 305.083 li
59.7188 305.083 li
59.7188 307.063 li
45.1387 307.063 li
45.1387 302.603 li
45.1387 300.943 45.4987 299.703 46.1787 298.883 cv
46.8787 298.063 47.9388 297.643 49.3387 297.643 cv
50.2588 297.643 51.0387 297.863 51.6387 298.283 cv
52.2388 298.723 52.6587 299.343 52.8787 300.143 cv
46.7588 305.083 mo
51.9388 305.083 li
51.9388 302.603 li
51.9388 301.663 51.7188 300.943 51.2787 300.463 cv
50.8387 299.983 50.1987 299.723 49.3387 299.723 cv
48.4987 299.723 47.8587 299.983 47.4187 300.463 cv
46.9787 300.943 46.7588 301.663 46.7588 302.603 cv
46.7588 305.083 li
f
53.7987 283.883 mo
54.6787 283.883 li
54.6787 292.143 li
55.9188 292.063 56.8787 291.703 57.5187 291.023 cv
58.1587 290.363 58.4787 289.443 58.4787 288.243 cv
58.4787 287.563 58.3988 286.883 58.2388 286.243 cv
58.0788 285.603 57.8187 284.943 57.4587 284.303 cv
59.1587 284.303 li
59.4388 284.943 59.6587 285.603 59.7788 286.283 cv
59.8988 286.963 59.9787 287.663 59.9787 288.343 cv
59.9787 290.103 59.4787 291.483 58.4787 292.503 cv
57.4787 293.523 56.0988 294.023 54.3587 294.023 cv
52.5788 294.023 51.1587 293.543 50.0987 292.583 cv
49.0588 291.623 48.5187 290.303 48.5187 288.663 cv
48.5187 287.183 48.9987 286.023 49.9388 285.163 cv
50.8988 284.323 52.1787 283.883 53.7987 283.883 cv
53.2787 285.683 mo
52.2987 285.703 51.5187 285.983 50.9188 286.503 cv
50.3387 287.043 50.0387 287.763 50.0387 288.643 cv
50.0387 289.643 50.3387 290.443 50.8988 291.043 cv
51.4587 291.643 52.2588 292.003 53.2787 292.083 cv
53.2787 285.683 li
f
44.5187 280.943 mo
44.5187 279.143 li
59.7188 279.143 li
59.7188 280.943 li
44.5187 280.943 li
f
54.2188 270.403 mo
54.2188 271.863 54.3988 272.863 54.7188 273.423 cv
55.0588 273.983 55.6188 274.263 56.4188 274.263 cv
57.0588 274.263 57.5788 274.063 57.9388 273.643 cv
58.3187 273.223 58.4987 272.643 58.4987 271.923 cv
58.4987 270.923 58.1587 270.123 57.4388 269.523 cv
56.7388 268.923 55.7987 268.623 54.6188 268.623 cv
54.2188 268.623 li
54.2188 270.403 li
53.4787 266.823 mo
59.7188 266.823 li
59.7188 268.623 li
58.0588 268.623 li
58.7388 269.043 59.2188 269.563 59.5187 270.163 cv
59.8187 270.763 59.9787 271.523 59.9787 272.403 cv
59.9787 273.523 59.6787 274.423 59.0588 275.083 cv
58.4388 275.743 57.5988 276.063 56.5387 276.063 cv
55.3187 276.063 54.3988 275.663 53.7588 274.823 cv
53.1387 274.003 52.8187 272.783 52.8187 271.143 cv
52.8187 268.623 li
52.6387 268.623 li
51.8187 268.623 51.1787 268.903 50.7188 269.443 cv
50.2787 269.983 50.0387 270.743 50.0387 271.723 cv
50.0387 272.363 50.1188 272.963 50.2787 273.563 cv
50.4388 274.163 50.6587 274.723 50.9388 275.263 cv
49.2787 275.263 li
49.0387 274.623 48.8387 273.983 48.7188 273.363 cv
48.5987 272.743 48.5187 272.143 48.5187 271.543 cv
48.5187 269.963 48.9388 268.783 49.7588 268.003 cv
50.5788 267.223 51.8187 266.823 53.4787 266.823 cv
f
45.6787 261.343 mo
48.7787 261.343 li
48.7787 257.643 li
50.1787 257.643 li
50.1787 261.343 li
56.1188 261.343 li
57.0187 261.343 57.5988 261.223 57.8387 260.983 cv
58.0988 260.743 58.2188 260.243 58.2188 259.483 cv
58.2188 257.643 li
59.7188 257.643 li
59.7188 259.483 li
59.7188 260.883 59.4588 261.843 58.9388 262.363 cv
58.4188 262.883 57.4787 263.143 56.1188 263.143 cv
50.1787 263.143 li
50.1787 264.463 li
48.7787 264.463 li
48.7787 263.143 li
45.6787 263.143 li
45.6787 261.343 li
f
48.7787 255.283 mo
48.7787 253.483 li
59.7188 253.483 li
59.7188 255.283 li
48.7787 255.283 li
44.5187 255.283 mo
44.5187 253.483 li
46.7987 253.483 li
46.7987 255.283 li
44.5187 255.283 li
f
48.7787 251.003 mo
48.7787 249.103 li
57.9588 245.683 li
48.7787 242.263 li
48.7787 240.363 li
59.7188 244.463 li
59.7188 246.903 li
48.7787 251.003 li
f
53.7987 228.523 mo
54.6787 228.523 li
54.6787 236.783 li
55.9188 236.703 56.8787 236.343 57.5187 235.663 cv
58.1587 235.003 58.4787 234.083 58.4787 232.883 cv
58.4787 232.203 58.3988 231.523 58.2388 230.883 cv
58.0788 230.243 57.8187 229.583 57.4587 228.943 cv
59.1587 228.943 li
59.4388 229.583 59.6587 230.243 59.7788 230.923 cv
59.8988 231.603 59.9787 232.303 59.9787 232.983 cv
59.9787 234.743 59.4787 236.123 58.4787 237.143 cv
57.4787 238.163 56.0988 238.663 54.3587 238.663 cv
52.5788 238.663 51.1587 238.183 50.0987 237.223 cv
49.0588 236.263 48.5187 234.943 48.5187 233.303 cv
48.5187 231.823 48.9987 230.663 49.9388 229.803 cv
50.8988 228.963 52.1787 228.523 53.7987 228.523 cv
53.2787 230.323 mo
52.2987 230.343 51.5187 230.623 50.9188 231.143 cv
50.3387 231.683 50.0387 232.403 50.0387 233.283 cv
50.0387 234.283 50.3387 235.083 50.8988 235.683 cv
51.4587 236.283 52.2588 236.643 53.2787 236.723 cv
53.2787 230.323 li
f
45.1387 219.143 mo
45.1387 217.163 li
58.0588 217.163 li
58.0588 210.063 li
59.7188 210.063 li
59.7188 219.143 li
45.1387 219.143 li
f
48.7787 208.083 mo
48.7787 206.283 li
59.7188 206.283 li
59.7188 208.083 li
48.7787 208.083 li
44.5187 208.083 mo
44.5187 206.283 li
46.7987 206.283 li
46.7987 208.083 li
44.5187 208.083 li
f
44.5187 202.583 mo
44.5187 200.783 li
53.4987 200.783 li
48.7787 195.423 li
48.7787 193.123 li
53.8988 198.923 li
59.7188 192.883 li
59.7188 195.223 li
54.3787 200.783 li
59.7188 200.783 li
59.7188 202.583 li
44.5187 202.583 li
f
53.7987 181.583 mo
54.6787 181.583 li
54.6787 189.843 li
55.9188 189.763 56.8787 189.403 57.5187 188.723 cv
58.1587 188.063 58.4787 187.143 58.4787 185.943 cv
58.4787 185.263 58.3988 184.583 58.2388 183.943 cv
58.0788 183.303 57.8187 182.643 57.4587 182.003 cv
59.1587 182.003 li
59.4388 182.643 59.6587 183.303 59.7788 183.983 cv
59.8988 184.663 59.9787 185.363 59.9787 186.043 cv
59.9787 187.803 59.4787 189.183 58.4787 190.203 cv
57.4787 191.223 56.0988 191.723 54.3587 191.723 cv
52.5788 191.723 51.1587 191.243 50.0987 190.283 cv
49.0588 189.323 48.5187 188.003 48.5187 186.363 cv
48.5187 184.883 48.9987 183.723 49.9388 182.863 cv
50.8988 182.023 52.1787 181.583 53.7987 181.583 cv
53.2787 183.383 mo
52.2987 183.403 51.5187 183.683 50.9188 184.203 cv
50.3387 184.743 50.0387 185.463 50.0387 186.343 cv
50.0387 187.343 50.3387 188.143 50.8988 188.743 cv
51.4587 189.343 52.2588 189.703 53.2787 189.783 cv
53.2787 183.383 li
f
44.5187 178.643 mo
44.5187 176.843 li
59.7188 176.843 li
59.7188 178.643 li
44.5187 178.643 li
f
48.7787 173.083 mo
48.7787 171.283 li
59.7188 171.283 li
59.7188 173.083 li
48.7787 173.083 li
44.5187 173.083 mo
44.5187 171.283 li
46.7987 171.283 li
46.7987 173.083 li
44.5187 173.083 li
f
53.1188 158.423 mo
59.7188 158.423 li
59.7188 160.223 li
53.1787 160.223 li
52.1387 160.223 51.3787 160.443 50.8587 160.843 cv
50.3387 161.243 50.0788 161.843 50.0788 162.643 cv
50.0788 163.623 50.3988 164.383 51.0187 164.943 cv
51.6387 165.503 52.4787 165.783 53.5387 165.783 cv
59.7188 165.783 li
59.7188 167.583 li
44.5187 167.583 li
44.5187 165.783 li
50.4787 165.783 li
49.8387 165.363 49.3387 164.863 49.0187 164.263 cv
48.6987 163.683 48.5187 163.003 48.5187 162.243 cv
48.5187 161.003 48.9187 160.043 49.6987 159.403 cv
50.4787 158.763 51.6188 158.423 53.1188 158.423 cv
f
50.0387 150.603 mo
50.0387 151.563 50.4188 152.323 51.1787 152.883 cv
51.9388 153.443 52.9587 153.723 54.2588 153.723 cv
55.5788 153.723 56.5988 153.463 57.3587 152.903 cv
58.1188 152.343 58.4787 151.583 58.4787 150.603 cv
58.4787 149.643 58.1188 148.883 57.3587 148.323 cv
56.5988 147.763 55.5788 147.483 54.2588 147.483 cv
52.9787 147.483 51.9388 147.763 51.1787 148.323 cv
50.4188 148.883 50.0387 149.643 50.0387 150.603 cv
48.5187 150.603 mo
48.5187 149.043 49.0387 147.823 50.0387 146.923 cv
51.0588 146.043 52.4587 145.583 54.2588 145.583 cv
56.0588 145.583 57.4587 146.043 58.4588 146.923 cv
59.4787 147.823 59.9787 149.043 59.9787 150.603 cv
59.9787 152.183 59.4787 153.423 58.4588 154.303 cv
57.4587 155.183 56.0588 155.623 54.2588 155.623 cv
52.4587 155.623 51.0588 155.183 50.0387 154.303 cv
49.0387 153.423 48.5187 152.183 48.5187 150.603 cv
f
50.0387 138.363 mo
50.0387 139.323 50.4188 140.083 51.1787 140.643 cv
51.9388 141.203 52.9587 141.483 54.2588 141.483 cv
55.5788 141.483 56.5988 141.223 57.3587 140.663 cv
58.1188 140.103 58.4787 139.343 58.4787 138.363 cv
58.4787 137.403 58.1188 136.643 57.3587 136.083 cv
56.5988 135.523 55.5788 135.243 54.2588 135.243 cv
52.9787 135.243 51.9388 135.523 51.1787 136.083 cv
50.4188 136.643 50.0387 137.403 50.0387 138.363 cv
48.5187 138.363 mo
48.5187 136.803 49.0387 135.583 50.0387 134.683 cv
51.0588 133.803 52.4587 133.343 54.2588 133.343 cv
56.0588 133.343 57.4587 133.803 58.4588 134.683 cv
59.4787 135.583 59.9787 136.803 59.9787 138.363 cv
59.9787 139.943 59.4787 141.183 58.4588 142.063 cv
57.4587 142.943 56.0588 143.383 54.2588 143.383 cv
52.4587 143.383 51.0588 142.943 50.0387 142.063 cv
49.0387 141.183 48.5187 139.943 48.5187 138.363 cv
f
50.4388 123.163 mo
44.5187 123.163 li
44.5187 121.363 li
59.7188 121.363 li
59.7188 123.163 li
58.0788 123.163 li
58.7388 123.543 59.2188 124.023 59.5187 124.603 cv
59.8187 125.183 59.9787 125.863 59.9787 126.663 cv
59.9787 127.983 59.4588 129.063 58.4188 129.903 cv
57.3787 130.743 55.9787 131.143 54.2588 131.143 cv
52.5387 131.143 51.1587 130.743 50.0987 129.903 cv
49.0588 129.063 48.5187 127.983 48.5187 126.663 cv
48.5187 125.863 48.6787 125.183 48.9987 124.603 cv
49.3187 124.023 49.7987 123.543 50.4388 123.163 cv
54.2588 129.283 mo
55.5788 129.283 56.6188 129.023 57.3787 128.483 cv
58.1387 127.943 58.4987 127.183 58.4987 126.223 cv
58.4987 125.283 58.1387 124.543 57.3787 123.983 cv
56.6188 123.443 55.5788 123.163 54.2588 123.163 cv
52.9388 123.163 51.9188 123.443 51.1587 123.983 cv
50.3988 124.543 50.0187 125.283 50.0187 126.223 cv
50.0187 127.183 50.3988 127.943 51.1587 128.483 cv
51.9188 129.023 52.9388 129.283 54.2588 129.283 cv
f
2 lw
2 lc
72 43.2 mo
518.4 43.2 li
@
518.4 388.8 mo
518.4 43.2 li
@
72 388.8 mo
518.4 388.8 li
@
72 388.8 mo
72 43.2 li
@
346.6 114.944 mo
509.4 114.944 li
509.4 52.2001 li
346.6 52.2001 li
346.6 114.944 li
1 gry
f
346.6 114.944 mo
346.6 114.444 li
508.9 114.444 li
508.9 52.7 li
347.1 52.7 li
347.1 114.944 li
346.6 114.944 li
346.6 114.444 li
346.6 114.944 li
346.1 114.944 li
346.1 52.2001 li
346.1 52.0682 346.153 51.9394 346.246 51.8463 cv
346.34 51.7532 346.468 51.7002 346.6 51.7002 cv
509.4 51.7002 li
509.532 51.7002 509.66 51.7532 509.753 51.8463 cv
509.847 51.9394 509.9 52.0682 509.9 52.2001 cv
509.9 114.944 li
509.9 115.075 509.847 115.204 509.753 115.297 cv
509.66 115.39 509.532 115.444 509.4 115.444 cv
346.6 115.444 li
346.468 115.444 346.34 115.39 346.246 115.297 cv
346.153 115.204 346.1 115.075 346.1 114.944 cv
346.6 114.944 li
0 gry
f
389.3 72.5717 mo
354.3 72.5717 li
354.3 60.9721 li
389.3 60.9721 li
389.3 72.5717 li
.572549 .478431 0 0 cmyk
f
389.8 73.572 mo
353.8 73.572 li
353.668 73.572 353.539 73.5186 353.446 73.4254 cv
353.353 73.3323 353.3 73.2036 353.3 73.0721 cv
353.8 73.0721 li
353.3 73.0721 li
353.3 60.4717 li
353.3 60.3403 353.353 60.2115 353.446 60.1184 cv
353.539 60.0253 353.668 59.9718 353.8 59.9718 cv
389.8 59.9718 li
389.932 59.9718 390.06 60.0253 390.153 60.1184 cv
390.247 60.2115 390.3 60.3403 390.3 60.4717 cv
390.3 73.0721 li
390.3 73.2036 390.247 73.3323 390.153 73.4254 cv
390.06 73.5186 389.932 73.572 389.8 73.572 cv
354.3 72.5717 mo
389.3 72.5717 li
389.3 60.9721 li
354.3 60.9721 li
354.3 72.5717 li
0 0 0 .596078 cmyk
f
405.118 72.3687 mo
404.992 72.3687 404.938 72.2967 404.938 72.1347 cv
404.974 71.9907 li
405.028 71.8107 li
405.172 71.7387 li
406.306 71.7387 406.972 71.3787 407.17 70.6407 cv
409.51 61.2447 li
409.528 61.1367 409.546 61.0467 409.546 60.9927 cv
409.546 60.8667 409.474 60.7947 409.33 60.7767 cv
409.096 60.7407 408.664 60.7047 408.034 60.7047 cv
407.908 60.7047 407.854 60.6327 407.854 60.4707 cv
407.89 60.3087 li
407.962 60.1467 li
408.088 60.0747 li
411.256 60.0747 li
411.382 60.0747 411.454 60.1467 411.49 60.2727 cv
412.894 70.5867 li
419.446 60.2727 li
419.518 60.1467 419.644 60.0747 419.788 60.0747 cv
422.848 60.0747 li
422.956 60.0747 423.028 60.1647 423.028 60.3087 cv
422.974 60.4707 li
422.902 60.6507 li
422.794 60.7047 li
422.056 60.7047 421.552 60.7587 421.264 60.8307 cv
421.102 60.8847 420.994 61.0467 420.922 61.3167 cv
418.456 71.1987 li
418.42 71.3247 418.42 71.4147 418.42 71.4507 cv
418.438 71.5767 li
418.492 71.6307 li
418.636 71.6667 li
418.852 71.7207 419.284 71.7387 419.932 71.7387 cv
420.04 71.7387 420.112 71.8287 420.112 71.9727 cv
420.058 72.1527 420.022 72.2607 420.004 72.2967 cv
419.968 72.3507 419.914 72.3687 419.806 72.3687 cv
415.108 72.3687 li
414.982 72.3687 414.928 72.2967 414.928 72.1347 cv
414.964 71.9727 li
415.036 71.8107 li
415.162 71.7387 li
415.882 71.7387 416.404 71.7027 416.692 71.6127 cv
416.836 71.5767 416.962 71.4147 417.034 71.1267 cv
419.626 60.7047 li
412.354 72.1707 li
412.282 72.3147 412.156 72.3687 411.994 72.3687 cv
411.832 72.3687 411.742 72.3147 411.742 72.1707 cv
410.212 60.8487 li
407.746 70.7127 li
407.71 70.8387 li
407.692 70.9827 li
407.692 71.3067 407.818 71.5047 408.088 71.5947 cv
408.358 71.7027 408.7 71.7387 409.096 71.7387 cv
409.204 71.7387 409.276 71.8287 409.276 71.9727 cv
409.24 72.1347 409.204 72.2427 409.168 72.2967 cv
409.132 72.3507 409.078 72.3687 408.97 72.3687 cv
405.118 72.3687 li
0 gry
f
426.498 68.1747 mo
426.372 68.1387 426.318 68.0307 426.318 67.8687 cv
426.318 67.7247 426.39 67.5987 426.552 67.5267 cv
436.83 62.6847 li
436.956 62.6487 li
437.064 62.6487 437.136 62.6847 437.208 62.7567 cv
437.28 62.8287 437.316 62.9187 437.316 63.0087 cv
437.316 63.1527 437.244 63.2787 437.1 63.3507 cv
427.524 67.8687 li
437.154 72.4047 li
437.262 72.4407 437.316 72.5307 437.316 72.7107 cv
437.208 72.9627 li
437.136 73.0347 437.064 73.0707 436.956 73.0707 cv
436.83 73.0347 li
426.498 68.1747 li
f
443.469 72.7467 mo
441.993 72.7467 440.985 72.1527 440.463 70.9467 cv
439.923 69.7407 439.671 68.3007 439.671 66.6267 cv
439.671 65.5827 439.761 64.6107 439.959 63.6927 cv
440.139 62.7747 440.517 62.0007 441.093 61.3527 cv
441.651 60.7047 442.443 60.3807 443.469 60.3807 cv
444.261 60.3807 444.909 60.5787 445.413 60.9567 cv
445.917 61.3527 446.295 61.8387 446.565 62.4507 cv
446.817 63.0627 446.997 63.7287 447.105 64.4307 cv
447.195 65.1327 447.249 65.8707 447.249 66.6267 cv
447.249 67.6707 447.141 68.6247 446.961 69.5247 cv
446.763 70.4247 446.385 71.1987 445.827 71.8107 cv
445.269 72.4227 444.477 72.7467 443.469 72.7467 cv
443.469 72.2967 mo
444.135 72.2967 444.639 71.9547 444.963 71.2707 cv
445.287 70.5867 445.485 69.8307 445.557 69.0027 cv
445.629 68.1747 445.683 67.2747 445.683 66.3387 cv
445.683 65.4387 445.629 64.6107 445.557 63.8547 cv
445.485 63.0987 445.287 62.3967 444.963 61.7847 cv
444.639 61.1727 444.135 60.8487 443.469 60.8487 cv
442.785 60.8487 442.281 61.1727 441.957 61.7847 cv
441.633 62.3967 441.417 63.0987 441.345 63.8547 cv
441.273 64.6107 441.237 65.4387 441.237 66.3387 cv
441.237 67.0227 441.237 67.6527 441.273 68.2287 cv
441.309 68.8227 441.399 69.4347 441.543 70.0647 cv
441.687 70.6947 441.903 71.2167 442.227 71.6487 cv
442.533 72.0807 442.947 72.2967 443.469 72.2967 cv
f
449.481 71.3787 mo
449.481 71.1087 449.571 70.8747 449.769 70.6767 cv
449.967 70.4967 450.201 70.3887 450.471 70.3887 cv
450.633 70.3887 450.795 70.4427 450.957 70.5327 cv
451.101 70.6227 451.227 70.7487 451.317 70.8927 cv
451.407 71.0547 451.461 71.2167 451.461 71.3787 cv
451.461 71.6487 451.353 71.8827 451.173 72.0807 cv
450.975 72.2787 450.741 72.3687 450.471 72.3687 cv
450.201 72.3687 449.967 72.2787 449.769 72.0807 cv
449.571 71.8827 449.481 71.6487 449.481 71.3787 cv
f
453.603 69.3987 mo
453.603 68.7687 li
459.165 60.4707 li
459.345 60.3807 li
459.615 60.3807 li
459.741 60.3807 459.813 60.4527 459.813 60.5787 cv
459.813 68.7687 li
461.577 68.7687 li
461.577 69.3987 li
459.813 69.3987 li
459.813 71.1627 li
459.813 71.4147 459.975 71.5767 460.335 71.6487 cv
460.695 71.7207 461.091 71.7387 461.559 71.7387 cv
461.559 72.3687 li
456.609 72.3687 li
456.609 71.7387 li
457.059 71.7387 457.455 71.7207 457.815 71.6487 cv
458.175 71.5767 458.355 71.4147 458.355 71.1627 cv
458.355 69.3987 li
453.603 69.3987 li
454.197 68.7687 mo
458.463 68.7687 li
458.463 62.3967 li
454.197 68.7687 li
f
463.773 72.3687 mo
463.773 71.7387 li
465.267 71.7387 466.023 71.5587 466.023 71.1627 cv
466.023 61.7127 li
465.393 62.0187 464.601 62.1627 463.665 62.1627 cv
463.665 61.5327 li
465.123 61.5327 466.239 61.1547 466.995 60.3807 cv
467.247 60.3807 li
467.373 60.4347 li
467.427 60.5427 li
467.427 71.1627 li
467.427 71.5587 468.165 71.7387 469.677 71.7387 cv
469.677 72.3687 li
463.773 72.3687 li
f
472.017 72.3687 mo
471.891 72.3687 471.837 72.2967 471.837 72.1347 cv
471.873 71.9907 li
471.927 71.8107 li
472.071 71.7387 li
473.205 71.7387 473.871 71.3787 474.069 70.6407 cv
476.409 61.2447 li
476.427 61.1367 476.445 61.0467 476.445 60.9927 cv
476.445 60.8667 476.373 60.7947 476.229 60.7767 cv
475.995 60.7407 475.563 60.7047 474.933 60.7047 cv
474.807 60.7047 474.753 60.6327 474.753 60.4707 cv
474.789 60.3087 li
474.861 60.1467 li
474.987 60.0747 li
478.155 60.0747 li
478.281 60.0747 478.353 60.1467 478.389 60.2727 cv
479.793 70.5867 li
486.345 60.2727 li
486.417 60.1467 486.543 60.0747 486.687 60.0747 cv
489.747 60.0747 li
489.855 60.0747 489.927 60.1647 489.927 60.3087 cv
489.873 60.4707 li
489.801 60.6507 li
489.693 60.7047 li
488.955 60.7047 488.451 60.7587 488.163 60.8307 cv
488.001 60.8847 487.893 61.0467 487.821 61.3167 cv
485.355 71.1987 li
485.319 71.3247 485.319 71.4147 485.319 71.4507 cv
485.337 71.5767 li
485.391 71.6307 li
485.535 71.6667 li
485.751 71.7207 486.183 71.7387 486.831 71.7387 cv
486.939 71.7387 487.011 71.8287 487.011 71.9727 cv
486.957 72.1527 486.921 72.2607 486.903 72.2967 cv
486.867 72.3507 486.813 72.3687 486.705 72.3687 cv
482.007 72.3687 li
481.881 72.3687 481.827 72.2967 481.827 72.1347 cv
481.863 71.9727 li
481.935 71.8107 li
482.061 71.7387 li
482.781 71.7387 483.303 71.7027 483.591 71.6127 cv
483.735 71.5767 483.861 71.4147 483.933 71.1267 cv
486.525 60.7047 li
479.253 72.1707 li
479.181 72.3147 479.055 72.3687 478.893 72.3687 cv
478.731 72.3687 478.641 72.3147 478.641 72.1707 cv
477.111 60.8487 li
474.645 70.7127 li
474.609 70.8387 li
474.591 70.9827 li
474.591 71.3067 474.717 71.5047 474.987 71.5947 cv
475.257 71.7027 475.599 71.7387 475.995 71.7387 cv
476.103 71.7387 476.175 71.8287 476.175 71.9727 cv
476.139 72.1347 476.103 72.2427 476.067 72.2967 cv
476.031 72.3507 475.977 72.3687 475.869 72.3687 cv
472.017 72.3687 li
f
495.676 77.9936 mo
495.097 77.9936 494.568 77.8802 494.064 77.666 cv
493.56 77.4392 493.106 77.1494 492.715 76.7714 cv
492.312 76.3934 492.01 75.9398 491.796 75.4232 cv
491.581 74.9192 491.48 74.3774 491.48 73.8104 cv
491.48 73.2434 491.581 72.7016 491.796 72.1976 cv
492.01 71.6936 492.312 71.2526 492.715 70.8494 cv
493.106 70.4588 493.56 70.1564 494.064 69.9422 cv
494.568 69.728 495.097 69.6146 495.676 69.6146 cv
496.243 69.6146 496.785 69.728 497.289 69.9422 cv
497.793 70.169 498.247 70.4714 498.637 70.8494 cv
499.015 71.24 499.318 71.6936 499.532 72.1976 cv
499.746 72.7016 499.859 73.2434 499.859 73.8104 cv
499.859 74.3774 499.746 74.9192 499.532 75.4232 cv
499.305 75.9398 499.003 76.3934 498.625 76.7714 cv
498.247 77.1494 497.793 77.4392 497.289 77.666 cv
496.785 77.8802 496.243 77.9936 495.676 77.9936 cv
495.676 77.6282 mo
496.18 77.6282 496.672 77.5274 497.138 77.3258 cv
497.604 77.1242 498.02 76.8722 498.373 76.5194 cv
498.725 76.1666 498.99 75.7634 499.192 75.2972 cv
499.393 74.831 499.494 74.3396 499.494 73.8104 cv
499.494 73.2938 499.393 72.8024 499.192 72.3236 cv
498.99 71.8574 498.725 71.4542 498.385 71.1014 cv
498.033 70.7612 497.629 70.484 497.163 70.2824 cv
496.697 70.0808 496.206 69.98 495.676 69.98 cv
495.147 69.98 494.656 70.0808 494.19 70.2824 cv
493.711 70.484 493.307 70.7612 492.967 71.1014 cv
492.615 71.4542 492.35 71.8574 492.148 72.3362 cv
491.947 72.815 491.846 73.3064 491.846 73.8104 cv
491.846 74.3144 491.934 74.8058 492.136 75.2846 cv
492.337 75.7634 492.615 76.1666 492.967 76.5194 cv
493.32 76.8722 493.736 77.1242 494.215 77.3258 cv
494.681 77.5274 495.172 77.6282 495.676 77.6282 cv
495.676 74.7176 mo
495.424 74.7176 495.21 74.6294 495.034 74.453 cv
494.857 74.2766 494.769 74.0624 494.769 73.8104 cv
494.769 73.6466 494.807 73.4954 494.883 73.3568 cv
494.958 73.2308 495.072 73.1174 495.223 73.0292 cv
495.361 72.9536 495.513 72.9032 495.676 72.9032 cv
495.828 72.9032 495.979 72.9536 496.117 73.0292 cv
496.243 73.1174 496.357 73.2308 496.445 73.3568 cv
496.521 73.4954 496.571 73.6466 496.571 73.8104 cv
496.571 74.0624 496.47 74.2766 496.294 74.453 cv
496.117 74.6294 495.903 74.7176 495.676 74.7176 cv
f
389.3 101.244 mo
354.3 101.244 li
354.3 89.6437 li
389.3 89.6437 li
389.3 101.244 li
0 0 0 .301961 cmyk
f
389.8 102.244 mo
353.8 102.244 li
353.668 102.244 353.539 102.191 353.446 102.097 cv
353.353 102.004 353.3 101.876 353.3 101.744 cv
353.8 101.744 li
353.3 101.744 li
353.3 89.1438 li
353.3 89.0119 353.353 88.8831 353.446 88.79 cv
353.539 88.6969 353.668 88.6439 353.8 88.6439 cv
389.8 88.6439 li
389.932 88.6439 390.06 88.6969 390.153 88.79 cv
390.247 88.8831 390.3 89.0119 390.3 89.1438 cv
390.3 101.744 li
390.3 101.876 390.247 102.004 390.153 102.097 cv
390.06 102.19 389.932 102.244 389.8 102.244 cv
354.3 101.244 mo
389.3 101.244 li
389.3 89.6437 li
354.3 89.6437 li
354.3 101.244 li
0 0 0 .596078 cmyk
f
405.118 101.041 mo
404.992 101.041 404.938 100.969 404.938 100.807 cv
404.974 100.663 li
405.028 100.483 li
405.172 100.411 li
406.306 100.411 406.972 100.051 407.17 99.3126 cv
409.51 89.9166 li
409.528 89.8086 409.546 89.7186 409.546 89.6646 cv
409.546 89.5386 409.474 89.4666 409.33 89.4486 cv
409.096 89.4126 408.664 89.3766 408.034 89.3766 cv
407.908 89.3766 407.854 89.3046 407.854 89.1426 cv
407.89 88.9806 li
407.962 88.8186 li
408.088 88.7466 li
411.256 88.7466 li
411.382 88.7466 411.454 88.8186 411.49 88.9446 cv
412.894 99.2586 li
419.446 88.9446 li
419.518 88.8186 419.644 88.7466 419.788 88.7466 cv
422.848 88.7466 li
422.956 88.7466 423.028 88.8366 423.028 88.9806 cv
422.974 89.1426 li
422.902 89.3226 li
422.794 89.3766 li
422.056 89.3766 421.552 89.4306 421.264 89.5026 cv
421.102 89.5566 420.994 89.7186 420.922 89.9886 cv
418.456 99.8706 li
418.42 99.9966 418.42 100.087 418.42 100.123 cv
418.438 100.249 li
418.492 100.303 li
418.636 100.339 li
418.852 100.393 419.284 100.411 419.932 100.411 cv
420.04 100.411 420.112 100.501 420.112 100.645 cv
420.058 100.825 420.022 100.933 420.004 100.969 cv
419.968 101.023 419.914 101.041 419.806 101.041 cv
415.108 101.041 li
414.982 101.041 414.928 100.969 414.928 100.807 cv
414.964 100.645 li
415.036 100.483 li
415.162 100.411 li
415.882 100.411 416.404 100.375 416.692 100.285 cv
416.836 100.249 416.962 100.087 417.034 99.7986 cv
419.626 89.3766 li
412.354 100.843 li
412.282 100.987 412.156 101.041 411.994 101.041 cv
411.832 101.041 411.742 100.987 411.742 100.843 cv
410.212 89.5206 li
407.746 99.3846 li
407.71 99.5106 li
407.692 99.6546 li
407.692 99.9786 407.818 100.177 408.088 100.267 cv
408.358 100.375 408.7 100.411 409.096 100.411 cv
409.204 100.411 409.276 100.501 409.276 100.645 cv
409.24 100.807 409.204 100.915 409.168 100.969 cv
409.132 101.023 409.078 101.041 408.97 101.041 cv
405.118 101.041 li
0 gry
f
426.318 101.383 mo
426.318 101.221 426.39 101.113 426.552 101.041 cv
436.11 96.5406 li
426.498 91.9866 li
426.372 91.9506 426.318 91.8606 426.318 91.6806 cv
426.408 91.4466 li
426.48 91.3746 426.57 91.3206 426.678 91.3206 cv
426.822 91.3566 li
437.154 96.2346 li
437.262 96.2886 437.316 96.3966 437.316 96.5406 cv
437.316 96.7026 437.244 96.8106 437.1 96.8646 cv
426.822 101.707 li
426.678 101.743 li
426.57 101.743 426.48 101.689 426.408 101.617 cv
426.318 101.383 li
f
443.469 101.419 mo
441.993 101.419 440.985 100.825 440.463 99.6186 cv
439.923 98.4126 439.671 96.9726 439.671 95.2986 cv
439.671 94.2546 439.761 93.2826 439.959 92.3646 cv
440.139 91.4466 440.517 90.6726 441.093 90.0246 cv
441.651 89.3766 442.443 89.0526 443.469 89.0526 cv
444.261 89.0526 444.909 89.2506 445.413 89.6286 cv
445.917 90.0246 446.295 90.5106 446.565 91.1226 cv
446.817 91.7346 446.997 92.4006 447.105 93.1026 cv
447.195 93.8046 447.249 94.5426 447.249 95.2986 cv
447.249 96.3426 447.141 97.2966 446.961 98.1966 cv
446.763 99.0966 446.385 99.8706 445.827 100.483 cv
445.269 101.095 444.477 101.419 443.469 101.419 cv
443.469 100.969 mo
444.135 100.969 444.639 100.627 444.963 99.9426 cv
445.287 99.2586 445.485 98.5026 445.557 97.6746 cv
445.629 96.8466 445.683 95.9466 445.683 95.0106 cv
445.683 94.1106 445.629 93.2826 445.557 92.5266 cv
445.485 91.7706 445.287 91.0686 444.963 90.4566 cv
444.639 89.8446 444.135 89.5206 443.469 89.5206 cv
442.785 89.5206 442.281 89.8446 441.957 90.4566 cv
441.633 91.0686 441.417 91.7706 441.345 92.5266 cv
441.273 93.2826 441.237 94.1106 441.237 95.0106 cv
441.237 95.6946 441.237 96.3246 441.273 96.9006 cv
441.309 97.4946 441.399 98.1066 441.543 98.7366 cv
441.687 99.3666 441.903 99.8886 442.227 100.321 cv
442.533 100.753 442.947 100.969 443.469 100.969 cv
f
449.481 100.051 mo
449.481 99.7806 449.571 99.5466 449.769 99.3486 cv
449.967 99.1686 450.201 99.0606 450.471 99.0606 cv
450.633 99.0606 450.795 99.1146 450.957 99.2046 cv
451.101 99.2946 451.227 99.4206 451.317 99.5646 cv
451.407 99.7266 451.461 99.8886 451.461 100.051 cv
451.461 100.321 451.353 100.555 451.173 100.753 cv
450.975 100.951 450.741 101.041 450.471 101.041 cv
450.201 101.041 449.967 100.951 449.769 100.753 cv
449.571 100.555 449.481 100.321 449.481 100.051 cv
f
453.603 98.0706 mo
453.603 97.4406 li
459.165 89.1426 li
459.345 89.0526 li
459.615 89.0526 li
459.741 89.0526 459.813 89.1246 459.813 89.2506 cv
459.813 97.4406 li
461.577 97.4406 li
461.577 98.0706 li
459.813 98.0706 li
459.813 99.8346 li
459.813 100.087 459.975 100.249 460.335 100.321 cv
460.695 100.393 461.091 100.411 461.559 100.411 cv
461.559 101.041 li
456.609 101.041 li
456.609 100.411 li
457.059 100.411 457.455 100.393 457.815 100.321 cv
458.175 100.249 458.355 100.087 458.355 99.8346 cv
458.355 98.0706 li
453.603 98.0706 li
454.197 97.4406 mo
458.463 97.4406 li
458.463 91.0686 li
454.197 97.4406 li
f
463.773 101.041 mo
463.773 100.411 li
465.267 100.411 466.023 100.231 466.023 99.8346 cv
466.023 90.3846 li
465.393 90.6906 464.601 90.8346 463.665 90.8346 cv
463.665 90.2046 li
465.123 90.2046 466.239 89.8266 466.995 89.0526 cv
467.247 89.0526 li
467.373 89.1066 li
467.427 89.2146 li
467.427 99.8346 li
467.427 100.231 468.165 100.411 469.677 100.411 cv
469.677 101.041 li
463.773 101.041 li
f
472.017 101.041 mo
471.891 101.041 471.837 100.969 471.837 100.807 cv
471.873 100.663 li
471.927 100.483 li
472.071 100.411 li
473.205 100.411 473.871 100.051 474.069 99.3126 cv
476.409 89.9166 li
476.427 89.8086 476.445 89.7186 476.445 89.6646 cv
476.445 89.5386 476.373 89.4666 476.229 89.4486 cv
475.995 89.4126 475.563 89.3766 474.933 89.3766 cv
474.807 89.3766 474.753 89.3046 474.753 89.1426 cv
474.789 88.9806 li
474.861 88.8186 li
474.987 88.7466 li
478.155 88.7466 li
478.281 88.7466 478.353 88.8186 478.389 88.9446 cv
479.793 99.2586 li
486.345 88.9446 li
486.417 88.8186 486.543 88.7466 486.687 88.7466 cv
489.747 88.7466 li
489.855 88.7466 489.927 88.8366 489.927 88.9806 cv
489.873 89.1426 li
489.801 89.3226 li
489.693 89.3766 li
488.955 89.3766 488.451 89.4306 488.163 89.5026 cv
488.001 89.5566 487.893 89.7186 487.821 89.9886 cv
485.355 99.8706 li
485.319 99.9966 485.319 100.087 485.319 100.123 cv
485.337 100.249 li
485.391 100.303 li
485.535 100.339 li
485.751 100.393 486.183 100.411 486.831 100.411 cv
486.939 100.411 487.011 100.501 487.011 100.645 cv
486.957 100.825 486.921 100.933 486.903 100.969 cv
486.867 101.023 486.813 101.041 486.705 101.041 cv
482.007 101.041 li
481.881 101.041 481.827 100.969 481.827 100.807 cv
481.863 100.645 li
481.935 100.483 li
482.061 100.411 li
482.781 100.411 483.303 100.375 483.591 100.285 cv
483.735 100.249 483.861 100.087 483.933 99.7986 cv
486.525 89.3766 li
479.253 100.843 li
479.181 100.987 479.055 101.041 478.893 101.041 cv
478.731 101.041 478.641 100.987 478.641 100.843 cv
477.111 89.5206 li
474.645 99.3846 li
474.609 99.5106 li
474.591 99.6546 li
474.591 99.9786 474.717 100.177 474.987 100.267 cv
475.257 100.375 475.599 100.411 475.995 100.411 cv
476.103 100.411 476.175 100.501 476.175 100.645 cv
476.139 100.807 476.103 100.915 476.067 100.969 cv
476.031 101.023 475.977 101.041 475.869 101.041 cv
472.017 101.041 li
f
495.676 106.666 mo
495.097 106.666 494.568 106.552 494.064 106.338 cv
493.56 106.111 493.106 105.821 492.715 105.443 cv
492.312 105.065 492.01 104.612 491.796 104.095 cv
491.581 103.591 491.48 103.049 491.48 102.482 cv
491.48 101.915 491.581 101.374 491.796 100.87 cv
492.01 100.366 492.312 99.9245 492.715 99.5213 cv
493.106 99.1307 493.56 98.8283 494.064 98.6141 cv
494.568 98.3999 495.097 98.2865 495.676 98.2865 cv
496.243 98.2865 496.785 98.3999 497.289 98.6141 cv
497.793 98.8409 498.247 99.1433 498.637 99.5213 cv
499.015 99.9119 499.318 100.366 499.532 100.87 cv
499.746 101.374 499.859 101.915 499.859 102.482 cv
499.859 103.049 499.746 103.591 499.532 104.095 cv
499.305 104.612 499.003 105.065 498.625 105.443 cv
498.247 105.821 497.793 106.111 497.289 106.338 cv
496.785 106.552 496.243 106.666 495.676 106.666 cv
495.676 106.3 mo
496.18 106.3 496.672 106.199 497.138 105.998 cv
497.604 105.796 498.02 105.544 498.373 105.191 cv
498.725 104.839 498.99 104.435 499.192 103.969 cv
499.393 103.503 499.494 103.012 499.494 102.482 cv
499.494 101.966 499.393 101.474 499.192 100.996 cv
498.99 100.529 498.725 100.126 498.385 99.7733 cv
498.033 99.4331 497.629 99.1559 497.163 98.9543 cv
496.697 98.7527 496.206 98.6519 495.676 98.6519 cv
495.147 98.6519 494.656 98.7527 494.19 98.9543 cv
493.711 99.1559 493.307 99.4331 492.967 99.7733 cv
492.615 100.126 492.35 100.529 492.148 101.008 cv
491.947 101.487 491.846 101.978 491.846 102.482 cv
491.846 102.986 491.934 103.478 492.136 103.957 cv
492.337 104.435 492.615 104.839 492.967 105.191 cv
493.32 105.544 493.736 105.796 494.215 105.998 cv
494.681 106.199 495.172 106.3 495.676 106.3 cv
495.676 103.39 mo
495.424 103.39 495.21 103.301 495.034 103.125 cv
494.857 102.949 494.769 102.734 494.769 102.482 cv
494.769 102.319 494.807 102.167 494.883 102.029 cv
494.958 101.903 495.072 101.789 495.223 101.701 cv
495.361 101.626 495.513 101.575 495.676 101.575 cv
495.828 101.575 495.979 101.626 496.117 101.701 cv
496.243 101.789 496.357 101.903 496.445 102.029 cv
496.521 102.167 496.571 102.319 496.571 102.482 cv
496.571 102.734 496.47 102.949 496.294 103.125 cv
496.117 103.301 495.903 103.39 495.676 103.39 cv
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
